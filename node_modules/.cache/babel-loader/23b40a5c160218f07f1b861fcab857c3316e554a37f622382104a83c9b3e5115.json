{"ast":null,"code":"import { mapGetters } from 'vuex';\nimport { campingSpotAPI, bookingAPI } from '@/services/api';\nexport default {\n  name: 'CampingSpotDetails',\n  props: {\n    id: {\n      type: [String, Number],\n      required: true\n    }\n  },\n  data() {\n    return {\n      spot: {\n        images: [],\n        name: '',\n        location: '',\n        description: '',\n        pricePerNight: 0,\n        capacity: 1,\n        amenities: [],\n        reviews: [],\n        averageRating: null,\n        reviewCount: 0\n      },\n      isLoading: true,\n      showAllPhotos: false,\n      showReviewForm: false,\n      showBookingModal: false,\n      review: {\n        rating: 5,\n        comment: ''\n      },\n      booking: {\n        startDate: '',\n        endDate: '',\n        guestCount: 1,\n        specialRequests: ''\n      },\n      isSubmittingReview: false,\n      isSubmittingBooking: false,\n      isCheckingAvailability: false,\n      availabilityStatus: null,\n      availabilityMessage: '',\n      bookingCalculation: {\n        nights: 0,\n        subtotal: 0,\n        serviceFee: 0,\n        total: 0\n      }\n    };\n  },\n  computed: {\n    ...mapGetters(['isAuthenticated', 'userId']),\n    normalizedImages() {\n      console.log('Raw spot images:', this.spot?.images);\n      if (!this.spot || !this.spot.images) return [];\n      const normalized = this.spot.images.map(img => {\n        console.log('Processing image:', img);\n        let url = '';\n        if (typeof img === 'string') {\n          url = img;\n        } else if (typeof img === 'object') {\n          url = img.url || img.path || '';\n        }\n        if (!url) {\n          console.warn('Invalid image format:', img);\n          return null;\n        }\n\n        // If it's already a full URL, use it as is\n        if (url.startsWith('http')) {\n          return {\n            url\n          };\n        }\n\n        // Otherwise, prepend the API base URL\n        return {\n          url: `http://localhost:3000${url.startsWith('/') ? url : '/' + url}`\n        };\n      }).filter(Boolean);\n      console.log('Normalized images:', normalized);\n      return normalized;\n    },\n    spotId() {\n      const id = parseInt(this.id);\n      if (isNaN(id)) {\n        console.error('Invalid camping spot ID:', this.id);\n        return null;\n      }\n      return id;\n    },\n    minDate() {\n      const today = new Date();\n      return today.toISOString().split('T')[0];\n    }\n  },\n  methods: {\n    formatPrice(price) {\n      return price.toFixed(2);\n    },\n    async fetchCampingSpot() {\n      try {\n        this.isLoading = true;\n        console.log('Fetching camping spot with ID:', this.spotId);\n        if (!this.spotId) {\n          throw new Error('Invalid camping spot ID');\n        }\n        const response = await campingSpotAPI.getById(this.spotId);\n        console.log('Camping spot full response:', JSON.stringify(response, null, 2));\n        console.log('Response type:', typeof response);\n        console.log('Response data type:', typeof response.data);\n        console.log('Response images:', response?.images);\n        console.log('Response images type:', typeof response?.images);\n        console.log('Response images is array:', Array.isArray(response?.images));\n        this.spot = response;\n        console.log('Spot after assignment:', JSON.stringify(this.spot, null, 2));\n        console.log('Spot images after assignment:', this.spot.images);\n        console.log('Spot images type after assignment:', typeof this.spot.images);\n        console.log('Spot images is array after assignment:', Array.isArray(this.spot.images));\n      } catch (error) {\n        console.error('Error fetching camping spot:', error);\n        console.error('Error response:', error.response);\n        console.error('Error status:', error.response?.status);\n        console.error('Error data:', error.response?.data);\n        this.$store.commit('setNotification', {\n          type: 'error',\n          message: 'Failed to load camping spot details'\n        });\n      } finally {\n        this.isLoading = false;\n      }\n    },\n    getImageUrl(path) {\n      if (!path) return '';\n      if (typeof path === 'object') path = path.url; // support { url: '...' }\n      if (!path) return '';\n      if (path.startsWith('http')) return path;\n      return `http://localhost:3000${path.startsWith('/') ? path : '/' + path}`;\n    },\n    formatDate(date) {\n      return new Date(date).toLocaleDateString('en-US', {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric'\n      });\n    },\n    async submitReview() {\n      if (!this.isAuthenticated) {\n        this.$router.push('/login');\n        return;\n      }\n      try {\n        this.isSubmittingReview = true;\n        await campingSpotAPI.createReview(this.spotId, {\n          rating: this.review.rating,\n          comment: this.review.comment\n        });\n        this.showReviewForm = false;\n        this.review = {\n          rating: 5,\n          comment: ''\n        };\n        await this.fetchCampingSpot();\n        this.$store.commit('setNotification', {\n          type: 'success',\n          message: 'Review submitted successfully'\n        });\n      } catch (error) {\n        console.error('Error submitting review:', error);\n        this.$store.commit('setNotification', {\n          type: 'error',\n          message: 'Failed to submit review'\n        });\n      } finally {\n        this.isSubmittingReview = false;\n      }\n    },\n    calculateBookingDetails() {\n      if (!this.booking.startDate || !this.booking.endDate) {\n        this.bookingCalculation = {\n          nights: 0,\n          subtotal: 0,\n          serviceFee: 0,\n          total: 0\n        };\n        return;\n      }\n      const start = new Date(this.booking.startDate);\n      const end = new Date(this.booking.endDate);\n      const nights = Math.ceil((end - start) / (1000 * 60 * 60 * 24));\n      const subtotal = nights * this.spot.pricePerNight;\n      const serviceFee = Math.round(subtotal * 0.1); // 10% service fee\n      const total = subtotal + serviceFee;\n      this.bookingCalculation = {\n        nights,\n        subtotal,\n        serviceFee,\n        total\n      };\n    },\n    async checkAvailability() {\n      if (!this.isAuthenticated) {\n        this.$router.push('/login');\n        return;\n      }\n      try {\n        this.isCheckingAvailability = true;\n        const response = await campingSpotAPI.checkAvailability(this.spotId, {\n          startDate: this.booking.startDate,\n          endDate: this.booking.endDate,\n          guestCount: this.booking.guestCount\n        });\n        if (response.available) {\n          this.availabilityStatus = 'available';\n          this.availabilityMessage = response.message || 'These dates are available!';\n          this.showBookingModal = true;\n        } else {\n          this.availabilityStatus = 'unavailable';\n          this.availabilityMessage = response.message || 'These dates are not available. Please try different dates.';\n        }\n      } catch (error) {\n        console.error('Error checking availability:', error);\n        this.$store.commit('setNotification', {\n          type: 'error',\n          message: 'Failed to check availability'\n        });\n      } finally {\n        this.isCheckingAvailability = false;\n      }\n    },\n    async submitBooking() {\n      try {\n        this.isSubmittingBooking = true;\n        await bookingAPI.create({\n          campingSpotId: this.spotId,\n          startDate: this.booking.startDate,\n          endDate: this.booking.endDate,\n          guestCount: this.booking.guestCount,\n          specialRequests: this.booking.specialRequests\n        });\n        this.showBookingModal = false;\n        this.$router.push('/bookings');\n        this.$store.commit('setNotification', {\n          type: 'success',\n          message: 'Booking confirmed successfully'\n        });\n      } catch (error) {\n        console.error('Error submitting booking:', error);\n        this.$store.commit('setNotification', {\n          type: 'error',\n          message: 'Failed to confirm booking'\n        });\n      } finally {\n        this.isSubmittingBooking = false;\n      }\n    }\n  },\n  watch: {\n    'booking.startDate'() {\n      this.calculateBookingDetails();\n    },\n    'booking.endDate'() {\n      this.calculateBookingDetails();\n    },\n    'booking.guestCount'() {\n      this.calculateBookingDetails();\n    },\n    '$route.params.id'() {\n      this.fetchCampingSpot();\n    }\n  },\n  created() {\n    this.fetchCampingSpot();\n  }\n};","map":{"version":3,"names":["mapGetters","campingSpotAPI","bookingAPI","name","props","id","type","String","Number","required","data","spot","images","location","description","pricePerNight","capacity","amenities","reviews","averageRating","reviewCount","isLoading","showAllPhotos","showReviewForm","showBookingModal","review","rating","comment","booking","startDate","endDate","guestCount","specialRequests","isSubmittingReview","isSubmittingBooking","isCheckingAvailability","availabilityStatus","availabilityMessage","bookingCalculation","nights","subtotal","serviceFee","total","computed","normalizedImages","console","log","normalized","map","img","url","path","warn","startsWith","filter","Boolean","spotId","parseInt","isNaN","error","minDate","today","Date","toISOString","split","methods","formatPrice","price","toFixed","fetchCampingSpot","Error","response","getById","JSON","stringify","Array","isArray","status","$store","commit","message","getImageUrl","formatDate","date","toLocaleDateString","year","month","day","submitReview","isAuthenticated","$router","push","createReview","calculateBookingDetails","start","end","Math","ceil","round","checkAvailability","available","submitBooking","create","campingSpotId","watch","booking.startDate","booking.endDate","booking.guestCount","$route.params.id","created"],"sources":["src/views/camping/CampingSpotDetails.vue"],"sourcesContent":["<template>\n  <div class=\"min-h-screen bg-neutral-50\">\n    <div v-if=\"isLoading\" class=\"flex justify-center items-center min-h-screen\">\n      <svg class=\"animate-spin h-10 w-10 text-primary-500\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n        <circle class=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" stroke-width=\"4\"></circle>\n        <path class=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n      </svg>\n    </div>\n\n\n    <div v-else-if=\"!spot\" class=\"flex flex-col items-center justify-center min-h-screen\">\n      <svg class=\"w-16 h-16 text-neutral-300 mb-4\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n      </svg>\n      <h2 class=\"text-2xl font-semibold mb-2\">Camping spot not found</h2>\n      <p class=\"text-neutral-600 mb-6\">The camping spot you're looking for doesn't exist or has been removed.</p>\n      <router-link to=\"/camping-spots\" class=\"btn-primary\">Browse Camping Spots</router-link>\n    </div>\n\n    <div v-else class=\"container mx-auto px-4 py-8\">\n      <!-- Header Section -->\n      <div class=\"mb-8\">\n        <h1 class=\"text-3xl font-bold mb-2\">{{ spot.name }}</h1>\n        <div class=\"flex items-center text-neutral-600\">\n          <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5 mr-1\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n            <path fill-rule=\"evenodd\" d=\"M5.05 4.05a7 7 0 119.9 9.9L10 18.9l-4.95-4.95a7 7 0 010-9.9zM10 11a2 2 0 100-4 2 2 0 000 4z\" clip-rule=\"evenodd\" />\n          </svg>\n          <span>{{ spot.location }}</span>\n          <span class=\"mx-2\">•</span>\n          <div v-if=\"spot.averageRating !== null && spot.averageRating !== undefined\" class=\"flex items-center\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5 text-yellow-400\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n              <path d=\"M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118l-2.8-2.034c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z\" />\n            </svg>\n            <span class=\"ml-1\">{{ spot.averageRating.toFixed(1) }}</span>\n            <span class=\"ml-1\">({{ spot.reviewCount || 0 }} reviews)</span>\n          </div>\n        </div>\n      </div>\n\n      <!-- Image Gallery -->\n      <div class=\"mb-8\">\n        <div class=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          \n          <div v-if=\"spot.images && spot.images.length > 0\" class=\"relative h-96 rounded-lg overflow-hidden\">\n            <img \n              :src=\"normalizedImages[0]?.url\" \n              :alt=\"spot.name\"\n              class=\"w-full h-full object-cover\"\n            />\n\n          </div>\n          <div v-if=\"normalizedImages.length > 1\" class=\"grid grid-cols-2 gap-4\">\n            <div\n              v-for=\"(image, index) in normalizedImages.slice(1, 5)\"\n              :key=\"index\"\n              class=\"relative h-44 rounded-lg overflow-hidden\"\n            >\n              <img \n                :src=\"image.url\" \n                :alt=\"`${spot.name} - Image ${index + 2}`\"\n                class=\"w-full h-full object-cover\"\n              >\n            </div>\n          </div>\n\n          <div v-if=\"!spot.images || spot.images.length === 0\" class=\"relative h-96 rounded-lg overflow-hidden bg-neutral-100 flex items-center justify-center\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-16 w-16 text-neutral-400\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z\" />\n            </svg>\n          </div>\n        </div>\n        <button \n          v-if=\"spot.images && spot.images.length > 5\"\n          @click=\"showAllPhotos = true\"\n          class=\"mt-4 text-primary-600 hover:text-primary-700 font-medium\"\n        >\n          Show all {{ spot.images.length }} photos\n        </button>\n      </div>\n\n      <!-- Main Content -->\n      <div class=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n        <!-- Left Column -->\n        <div class=\"lg:col-span-2\">\n          <!-- Description -->\n          <div class=\"bg-white rounded-lg shadow-sm p-6 mb-8\">\n            <h2 class=\"text-2xl font-semibold mb-4\">About this camping spot</h2>\n            <p class=\"text-neutral-600 whitespace-pre-line\">{{ spot.description }}</p>\n          </div>\n\n          <!-- Amenities -->\n          <div class=\"bg-white rounded-lg shadow-sm p-6 mb-8\">\n            <h2 class=\"text-2xl font-semibold mb-4\">Amenities</h2>\n            <div class=\"grid grid-cols-2 md:grid-cols-3 gap-4\">\n              <div v-for=\"amenity in spot.amenities\" :key=\"amenity\" class=\"flex items-center\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5 text-primary-500 mr-2\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                  <path fill-rule=\"evenodd\" d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\" clip-rule=\"evenodd\" />\n                </svg>\n                <span>{{ amenity }}</span>\n              </div>\n            </div>\n          </div>\n\n          <!-- Reviews -->\n          <div class=\"bg-white rounded-lg shadow-sm p-6\">\n            <div class=\"flex justify-between items-center mb-6\">\n              <h2 class=\"text-2xl font-semibold\">Reviews</h2>\n              <button \n                v-if=\"isAuthenticated\"\n                @click=\"showReviewForm = true\"\n                class=\"btn-primary\"\n              >\n                Write a Review\n              </button>\n            </div>\n\n            <!-- Review Form -->\n            <div v-if=\"showReviewForm\" class=\"mb-8\">\n              <form @submit.prevent=\"submitReview\" class=\"space-y-4\">\n                <div>\n                  <label class=\"block text-sm font-medium text-neutral-700 mb-1\">Rating</label>\n                  <div class=\"flex items-center\">\n                    <button \n                      v-for=\"rating in 5\" \n                      :key=\"rating\"\n                      type=\"button\"\n                      @click=\"review.rating = rating\"\n                      class=\"focus:outline-none\"\n                    >\n                      <svg \n                        xmlns=\"http://www.w3.org/2000/svg\" \n                        class=\"h-8 w-8\"\n                        :class=\"rating <= review.rating ? 'text-yellow-400' : 'text-neutral-300'\"\n                        viewBox=\"0 0 20 20\" \n                        fill=\"currentColor\"\n                      >\n                        <path d=\"M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118l-2.8-2.034c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z\" />\n                      </svg>\n                    </button>\n                  </div>\n                </div>\n                <div>\n                  <label for=\"review\" class=\"block text-sm font-medium text-neutral-700 mb-1\">Your Review</label>\n                  <textarea\n                    id=\"review\"\n                    v-model=\"review.comment\"\n                    rows=\"4\"\n                    class=\"w-full rounded-md border-neutral-300 shadow-sm focus:border-primary-500 focus:ring-primary-500\"\n                    placeholder=\"Share your experience...\"\n                    required\n                  ></textarea>\n                </div>\n                <div class=\"flex justify-end space-x-4\">\n                  <button \n                    type=\"button\"\n                    @click=\"showReviewForm = false\"\n                    class=\"btn-secondary\"\n                  >\n                    Cancel\n                  </button>\n                  <button \n                    type=\"submit\"\n                    class=\"btn-primary\"\n                    :disabled=\"isSubmittingReview\"\n                  >\n                    {{ isSubmittingReview ? 'Submitting...' : 'Submit Review' }}\n                  </button>\n                </div>\n              </form>\n            </div>\n\n            <!-- Reviews List -->\n            <div v-if=\"spot.reviews && spot.reviews.length > 0\" class=\"space-y-6\">\n              <div \n                v-for=\"review in spot.reviews\" \n                :key=\"review.id\"\n                class=\"border-b border-neutral-200 pb-6 last:border-0 last:pb-0\"\n              >\n                <div class=\"flex items-center mb-2\">\n                  <div class=\"flex items-center\">\n                    <svg \n                      v-for=\"rating in 5\" \n                      :key=\"rating\"\n                      xmlns=\"http://www.w3.org/2000/svg\" \n                      class=\"h-5 w-5\"\n                      :class=\"rating <= review.rating ? 'text-yellow-400' : 'text-neutral-300'\"\n                      viewBox=\"0 0 20 20\" \n                      fill=\"currentColor\"\n                    >\n                      <path d=\"M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118l-2.8-2.034c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z\" />\n                    </svg>\n                  </div>\n                  <span class=\"ml-2 text-sm text-neutral-600\">{{ review.userName }}</span>\n                  <span class=\"mx-2 text-neutral-400\">•</span>\n                  <span class=\"text-sm text-neutral-600\">{{ formatDate(review.createdAt) }}</span>\n                </div>\n                <p class=\"text-neutral-600\">{{ review.comment }}</p>\n              </div>\n            </div>\n            <div v-else class=\"text-center py-8\">\n              <p class=\"text-neutral-600\">No reviews yet. Be the first to review this camping spot!</p>\n            </div>\n          </div>\n        </div>\n\n        <!-- Right Column - Booking Card -->\n        <div class=\"lg:col-span-1\">\n          <div class=\"bg-white rounded-lg shadow-sm p-6 sticky top-8\">\n            <div class=\"mb-6\">\n              <div class=\"flex items-baseline mb-2\">\n                <span class=\"text-2xl font-bold\">€{{ formatPrice(spot.pricePerNight) }}</span>\n                <span class=\"text-neutral-600 ml-1\">/night</span>\n              </div>\n              <div class=\"flex items-center text-neutral-600\">\n                <svg \n                  v-for=\"rating in 5\" \n                  :key=\"rating\"\n                  xmlns=\"http://www.w3.org/2000/svg\" \n                  class=\"h-4 w-4\"\n                  :class=\"spot.averageRating && rating <= spot.averageRating ? 'text-yellow-400' : 'text-neutral-300'\"\n                  viewBox=\"0 0 20 20\" \n                  fill=\"currentColor\"\n                >\n                  <path d=\"M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118l-2.8-2.034c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z\" />\n                </svg>\n                <span v-if=\"spot.averageRating\" class=\"ml-1\">{{ spot.averageRating.toFixed(1) }}</span>\n                <span class=\"ml-1\">({{ spot.reviewCount || 0 }} reviews)</span>\n              </div>\n            </div>\n\n            <form @submit.prevent=\"checkAvailability\" class=\"space-y-4\">\n              <div class=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <label for=\"startDate\" class=\"block text-sm font-medium text-neutral-700 mb-1\">Check-in</label>\n                  <input\n                    id=\"startDate\"\n                    v-model=\"booking.startDate\"\n                    type=\"date\"\n                    :min=\"minDate\"\n                    required\n                    class=\"w-full rounded-md border-neutral-300 shadow-sm focus:border-primary-500 focus:ring-primary-500\"\n                  >\n                </div>\n                <div>\n                  <label for=\"endDate\" class=\"block text-sm font-medium text-neutral-700 mb-1\">Check-out</label>\n                  <input\n                    id=\"endDate\"\n                    v-model=\"booking.endDate\"\n                    type=\"date\"\n                    :min=\"booking.startDate || minDate\"\n                    required\n                    class=\"w-full rounded-md border-neutral-300 shadow-sm focus:border-primary-500 focus:ring-primary-500\"\n                  >\n                </div>\n              </div>\n\n              <div>\n                <label for=\"guestCount\" class=\"block text-sm font-medium text-neutral-700 mb-1\">Guests</label>\n                <select\n                  id=\"guestCount\"\n                  v-model=\"booking.guestCount\"\n                  required\n                  class=\"w-full rounded-md border-neutral-300 shadow-sm focus:border-primary-500 focus:ring-primary-500\"\n                >\n                  <option v-for=\"n in spot.capacity\" :key=\"n\" :value=\"n\">{{ n }} {{ n === 1 ? 'guest' : 'guests' }}</option>\n                </select>\n              </div>\n\n              <div v-if=\"availabilityStatus\" class=\"p-4 rounded-md\" :class=\"availabilityStatus === 'available' ? 'bg-green-50 text-green-700' : 'bg-red-50 text-red-700'\">\n                {{ availabilityMessage }}\n              </div>\n\n              <div v-if=\"bookingCalculation.nights > 0\" class=\"space-y-2 pt-4 border-t border-neutral-200\">\n                <div class=\"flex justify-between\">\n                  <span>€{{ formatPrice(spot.pricePerNight) }} × {{ bookingCalculation.nights }} nights</span>\n                  <span>€{{ formatPrice(bookingCalculation.subtotal) }}</span>\n                </div>\n                <div class=\"flex justify-between\">\n                  <span>Service fee</span>\n                  <span>€{{ formatPrice(bookingCalculation.serviceFee) }}</span>\n                </div>\n                <div class=\"flex justify-between font-bold pt-2 border-t border-neutral-200\">\n                  <span>Total</span>\n                  <span>€{{ formatPrice(bookingCalculation.total) }}</span>\n                </div>\n              </div>\n\n              <button \n                type=\"submit\"\n                class=\"w-full btn-primary\"\n                :disabled=\"isCheckingAvailability || !booking.startDate || !booking.endDate\"\n              >\n                {{ isCheckingAvailability ? 'Checking...' : 'Check Availability' }}\n              </button>\n            </form>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Booking Modal -->\n    <div v-if=\"showBookingModal\" class=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\n      <div class=\"bg-white rounded-lg max-w-lg w-full p-6\">\n        <h2 class=\"text-2xl font-semibold mb-4\">Complete Your Booking</h2>\n        <form @submit.prevent=\"submitBooking\" class=\"space-y-4\">\n          <div>\n            <label for=\"specialRequests\" class=\"block text-sm font-medium text-neutral-700 mb-1\">Special Requests (Optional)</label>\n            <textarea\n              id=\"specialRequests\"\n              v-model=\"booking.specialRequests\"\n              rows=\"4\"\n              class=\"w-full rounded-md border-neutral-300 shadow-sm focus:border-primary-500 focus:ring-primary-500\"\n              placeholder=\"Any special requests or requirements?\"\n            ></textarea>\n          </div>\n\n          <div class=\"space-y-2 pt-4 border-t border-neutral-200\">\n            <div class=\"flex justify-between\">\n              <span>€{{ formatPrice(spot.pricePerNight) }} × {{ bookingCalculation.nights }} nights</span>\n              <span>€{{ formatPrice(bookingCalculation.subtotal) }}</span>\n            </div>\n            <div class=\"flex justify-between\">\n              <span>Service fee</span>\n              <span>€{{ formatPrice(bookingCalculation.serviceFee) }}</span>\n            </div>\n            <div class=\"flex justify-between font-bold pt-2 border-t border-neutral-200\">\n              <span>Total</span>\n              <span>€{{ formatPrice(bookingCalculation.total) }}</span>\n            </div>\n          </div>\n\n          <div class=\"flex justify-end space-x-4\">\n            <button \n              type=\"button\"\n              @click=\"showBookingModal = false\"\n              class=\"btn-secondary\"\n            >\n              Cancel\n            </button>\n            <button \n              type=\"submit\"\n              class=\"btn-primary\"\n              :disabled=\"isSubmittingBooking\"\n            >\n              {{ isSubmittingBooking ? 'Processing...' : 'Confirm Booking' }}\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapGetters } from 'vuex'\nimport { campingSpotAPI, bookingAPI } from '@/services/api'\n\nexport default {\n  name: 'CampingSpotDetails',\n  props: {\n    id: {\n      type: [String, Number],\n      required: true\n    }\n  },\n  data() {\n    return {\n      spot: {\n        images: [],\n        name: '',\n        location: '',\n        description: '',\n        pricePerNight: 0,\n        capacity: 1,\n        amenities: [],\n        reviews: [],\n        averageRating: null,\n        reviewCount: 0\n      },\n      isLoading: true,\n      showAllPhotos: false,\n      showReviewForm: false,\n      showBookingModal: false,\n      review: {\n        rating: 5,\n        comment: ''\n      },\n      booking: {\n        startDate: '',\n        endDate: '',\n        guestCount: 1,\n        specialRequests: ''\n      },\n      isSubmittingReview: false,\n      isSubmittingBooking: false,\n      isCheckingAvailability: false,\n      availabilityStatus: null,\n      availabilityMessage: '',\n      bookingCalculation: {\n        nights: 0,\n        subtotal: 0,\n        serviceFee: 0,\n        total: 0\n      }\n    }\n  },\n  computed: {\n    ...mapGetters(['isAuthenticated', 'userId']),\n    normalizedImages() {\n      console.log('Raw spot images:', this.spot?.images)\n      if (!this.spot || !this.spot.images) return []\n      \n      const normalized = this.spot.images.map(img => {\n        console.log('Processing image:', img)\n        let url = ''\n        \n        if (typeof img === 'string') {\n          url = img\n        } else if (typeof img === 'object') {\n          url = img.url || img.path || ''\n        }\n        \n        if (!url) {\n          console.warn('Invalid image format:', img)\n          return null\n        }\n        \n        // If it's already a full URL, use it as is\n        if (url.startsWith('http')) {\n          return { url }\n        }\n        \n        // Otherwise, prepend the API base URL\n        return { url: `http://localhost:3000${url.startsWith('/') ? url : '/' + url}` }\n      }).filter(Boolean)\n      \n      console.log('Normalized images:', normalized)\n      return normalized\n    },\n    spotId() {\n      const id = parseInt(this.id)\n      if (isNaN(id)) {\n        console.error('Invalid camping spot ID:', this.id)\n        return null\n      }\n      return id\n    },\n    \n    minDate() {\n      const today = new Date()\n      return today.toISOString().split('T')[0]\n    }\n  },\n  methods: {\n    formatPrice(price) {\n      return price.toFixed(2)\n    },\n\n    async fetchCampingSpot() {\n      try {\n        this.isLoading = true\n        console.log('Fetching camping spot with ID:', this.spotId)\n        if (!this.spotId) {\n          throw new Error('Invalid camping spot ID')\n        }\n        const response = await campingSpotAPI.getById(this.spotId)\n        console.log('Camping spot full response:', JSON.stringify(response, null, 2))\n        console.log('Response type:', typeof response)\n        console.log('Response data type:', typeof response.data)\n        console.log('Response images:', response?.images)\n        console.log('Response images type:', typeof response?.images)\n        console.log('Response images is array:', Array.isArray(response?.images))\n        \n        this.spot = response\n        console.log('Spot after assignment:', JSON.stringify(this.spot, null, 2))\n        console.log('Spot images after assignment:', this.spot.images)\n        console.log('Spot images type after assignment:', typeof this.spot.images)\n        console.log('Spot images is array after assignment:', Array.isArray(this.spot.images))\n\n      } catch (error) {\n        console.error('Error fetching camping spot:', error)\n        console.error('Error response:', error.response)\n        console.error('Error status:', error.response?.status)\n        console.error('Error data:', error.response?.data)\n        this.$store.commit('setNotification', {\n          type: 'error',\n          message: 'Failed to load camping spot details'\n        })\n      } finally {\n        this.isLoading = false\n      }\n    },\n    getImageUrl(path) {\n    if (!path) return '';\n    if (typeof path === 'object') path = path.url; // support { url: '...' }\n    if (!path) return '';\n    if (path.startsWith('http')) return path;\n    return `http://localhost:3000${path.startsWith('/') ? path : '/' + path}`;\n    },\n\n    formatDate(date) {\n      return new Date(date).toLocaleDateString('en-US', {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric'\n      })\n    },\n\n    async submitReview() {\n      if (!this.isAuthenticated) {\n        this.$router.push('/login')\n        return\n      }\n\n      try {\n        this.isSubmittingReview = true\n        await campingSpotAPI.createReview(this.spotId, {\n          rating: this.review.rating,\n          comment: this.review.comment\n        })\n        \n        this.showReviewForm = false\n        this.review = { rating: 5, comment: '' }\n        await this.fetchCampingSpot()\n        \n        this.$store.commit('setNotification', {\n          type: 'success',\n          message: 'Review submitted successfully'\n        })\n      } catch (error) {\n        console.error('Error submitting review:', error)\n        this.$store.commit('setNotification', {\n          type: 'error',\n          message: 'Failed to submit review'\n        })\n      } finally {\n        this.isSubmittingReview = false\n      }\n    },\n\n    calculateBookingDetails() {\n      if (!this.booking.startDate || !this.booking.endDate) {\n        this.bookingCalculation = {\n          nights: 0,\n          subtotal: 0,\n          serviceFee: 0,\n          total: 0\n        }\n        return\n      }\n\n      const start = new Date(this.booking.startDate)\n      const end = new Date(this.booking.endDate)\n      const nights = Math.ceil((end - start) / (1000 * 60 * 60 * 24))\n      \n      const subtotal = nights * this.spot.pricePerNight\n      const serviceFee = Math.round(subtotal * 0.1) // 10% service fee\n      const total = subtotal + serviceFee\n\n      this.bookingCalculation = {\n        nights,\n        subtotal,\n        serviceFee,\n        total\n      }\n    },\n\n    async checkAvailability() {\n      if (!this.isAuthenticated) {\n        this.$router.push('/login')\n        return\n      }\n\n      try {\n        this.isCheckingAvailability = true\n        const response = await campingSpotAPI.checkAvailability(this.spotId, {\n          startDate: this.booking.startDate,\n          endDate: this.booking.endDate,\n          guestCount: this.booking.guestCount\n        })\n\n        if (response.available) {\n          this.availabilityStatus = 'available'\n          this.availabilityMessage = response.message || 'These dates are available!'\n          this.showBookingModal = true\n        } else {\n          this.availabilityStatus = 'unavailable'\n          this.availabilityMessage = response.message || 'These dates are not available. Please try different dates.'\n        }\n      } catch (error) {\n        console.error('Error checking availability:', error)\n        this.$store.commit('setNotification', {\n          type: 'error',\n          message: 'Failed to check availability'\n        })\n      } finally {\n        this.isCheckingAvailability = false\n      }\n    },\n\n    async submitBooking() {\n      try {\n        this.isSubmittingBooking = true\n        await bookingAPI.create({\n          campingSpotId: this.spotId,\n          startDate: this.booking.startDate,\n          endDate: this.booking.endDate,\n          guestCount: this.booking.guestCount,\n          specialRequests: this.booking.specialRequests\n        })\n\n        this.showBookingModal = false\n        this.$router.push('/bookings')\n        \n        this.$store.commit('setNotification', {\n          type: 'success',\n          message: 'Booking confirmed successfully'\n        })\n      } catch (error) {\n        console.error('Error submitting booking:', error)\n        this.$store.commit('setNotification', {\n          type: 'error',\n          message: 'Failed to confirm booking'\n        })\n      } finally {\n        this.isSubmittingBooking = false\n      }\n    }\n  },\n  watch: {\n    'booking.startDate'() {\n      this.calculateBookingDetails()\n    },\n    'booking.endDate'() {\n      this.calculateBookingDetails()\n    },\n    'booking.guestCount'() {\n      this.calculateBookingDetails()\n    },\n    '$route.params.id'() {\n      this.fetchCampingSpot()\n    }\n  },\n  created() {\n    this.fetchCampingSpot()\n  }\n}\n</script>\n\n<style scoped>\n.btn-primary {\n  width: 100%;\n  padding: 0.75rem 1.5rem;\n  border-radius: 0.5rem;\n  font-weight: 600;\n  color: white;\n  transition: all 0.2s;\n  transform: translateZ(0);\n  background: linear-gradient(135deg, #3b82f6 0%, #2563eb 100%);\n  box-shadow: 0 4px 6px -1px rgba(37, 99, 235, 0.2), 0 2px 4px -1px rgba(37, 99, 235, 0.1);\n}\n\n.btn-primary:hover {\n  background: linear-gradient(135deg, #2563eb 0%, #1d4ed8 100%);\n  box-shadow: 0 6px 8px -1px rgba(37, 99, 235, 0.25), 0 3px 6px -1px rgba(37, 99, 235, 0.15);\n  transform: scale(1.02);\n}\n\n.btn-primary:focus {\n  outline: none;\n  box-shadow: 0 0 0 2px #3b82f6, 0 0 0 4px white;\n}\n\n.btn-primary:active {\n  transform: scale(0.98);\n}\n\n.btn-primary:disabled {\n  opacity: 0.5;\n  cursor: not-allowed;\n  transform: none;\n  background: linear-gradient(135deg, #93c5fd 0%, #60a5fa 100%);\n  box-shadow: none;\n}\n\n.btn-secondary {\n  padding: 0.5rem 1rem;\n  border-radius: 0.5rem;\n  font-weight: 500;\n  transition: all 0.2s;\n  background: white;\n  color: #4b5563;\n  border: 1px solid #e5e7eb;\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);\n}\n\n.btn-secondary:hover {\n  background-color: #f9fafb;\n  border-color: #d1d5db;\n}\n\n.btn-secondary:focus {\n  outline: none;\n  box-shadow: 0 0 0 2px #3b82f6, 0 0 0 4px white;\n}\n\n/* Modal button styles */\n.modal .btn-primary {\n  width: auto;\n}\n\n.modal .btn-secondary {\n  width: auto;\n}\n\n/* Availability status styles */\n.availability-status {\n  transition: all 0.3s ease-in-out;\n}\n\n.availability-status.available {\n  background-color: #f0fdf4;\n  color: #15803d;\n  border: 1px solid #bbf7d0;\n}\n\n.availability-status.unavailable {\n  background-color: #fef2f2;\n  color: #b91c1c;\n  border: 1px solid #fecaca;\n}\n\n/* Booking calculation styles */\n.booking-calculation {\n  margin-top: 1rem;\n  padding-top: 1rem;\n  border-top: 1px solid #e5e7eb;\n}\n\n.booking-calculation-row {\n  display: flex;\n  justify-content: space-between;\n  font-size: 0.875rem;\n}\n\n.booking-calculation-total {\n  display: flex;\n  justify-content: space-between;\n  font-weight: 700;\n  padding-top: 0.5rem;\n  margin-top: 0.5rem;\n  border-top: 1px solid #e5e7eb;\n  font-size: 1rem;\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}