{"ast":null,"code":"import { mapState } from 'vuex';\nimport AppNavbar from '@/components/layout/Navbar.vue';\nimport AppFooter from '@/components/layout/Footer.vue';\nexport default {\n  name: 'App',\n  components: {\n    AppNavbar,\n    AppFooter\n  },\n  data() {\n    return {\n      notificationStyles: {\n        success: 'bg-green-50 text-green-800 border border-green-200',\n        error: 'bg-red-50 text-red-800 border border-red-200',\n        info: 'bg-blue-50 text-blue-800 border border-blue-200',\n        warning: 'bg-yellow-50 text-yellow-800 border border-yellow-200'\n      }\n    };\n  },\n  computed: {\n    ...mapState({\n      notification: state => state.notification,\n      isLoading: state => state.isLoading\n    })\n  },\n  methods: {\n    hideNotification() {\n      this.$store.commit('clearNotification');\n    }\n  },\n  created() {\n    // Check for token on app start\n    this.$store.dispatch('checkAuth');\n  }\n};","map":{"version":3,"names":["mapState","AppNavbar","AppFooter","name","components","data","notificationStyles","success","error","info","warning","computed","notification","state","isLoading","methods","hideNotification","$store","commit","created","dispatch"],"sources":["src/App.vue"],"sourcesContent":["<template>\n  <div id=\"app\" class=\"min-h-screen flex flex-col\">\n    <AppNavbar />\n    \n    <main class=\"flex-grow\">\n      <transition name=\"fade\" mode=\"out-in\">\n        <router-view/>\n      </transition>\n    </main>\n    \n    <AppFooter />\n    \n    <!-- Global Alert/Notification -->\n    <transition name=\"slide-up\">\n      <div v-if=\"notification\" \n           :class=\"[\n             'fixed bottom-6 right-6 max-w-md p-4 rounded-lg shadow-lg z-50 transition-all transform',\n             notificationStyles[notification.type]\n           ]\">\n        <div class=\"flex items-start\">\n          <div class=\"flex-shrink-0 pt-0.5\">\n            <svg v-if=\"notification.type === 'success'\" class=\"h-6 w-6 text-green-500\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M5 13l4 4L19 7\" />\n            </svg>\n            <svg v-else-if=\"notification.type === 'error'\" class=\"h-6 w-6 text-red-500\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M6 18L18 6M6 6l12 12\" />\n            </svg>\n            <svg v-else class=\"h-6 w-6 text-blue-500\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n            </svg>\n          </div>\n          <div class=\"ml-3 w-0 flex-1\">\n            <p class=\"text-sm font-medium\">{{ notification.message }}</p>\n          </div>\n          <div class=\"ml-4 flex-shrink-0 flex\">\n            <button class=\"inline-flex text-neutral-400 focus:outline-none focus:text-neutral-500 transition ease-in-out duration-150\" @click=\"hideNotification\">\n              <svg class=\"h-5 w-5\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                <path fill-rule=\"evenodd\" d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\" clip-rule=\"evenodd\" />\n              </svg>\n            </button>\n          </div>\n        </div>\n      </div>\n    </transition>\n    \n    <!-- Loading Overlay -->\n    <div v-if=\"isLoading\" class=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n      <div class=\"bg-white p-6 rounded-lg shadow-xl flex flex-col items-center\">\n        <svg class=\"animate-spin h-10 w-10 text-primary-500 mb-4\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n          <circle class=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" stroke-width=\"4\"></circle>\n          <path class=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n        </svg>\n        <p class=\"text-lg font-medium text-neutral-800\">Loading...</p>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex'\nimport AppNavbar from '@/components/layout/Navbar.vue'\nimport AppFooter from '@/components/layout/Footer.vue'\n\nexport default {\n  name: 'App',\n  components: {\n    AppNavbar,\n    AppFooter\n  },\n  data() {\n    return {\n      notificationStyles: {\n        success: 'bg-green-50 text-green-800 border border-green-200',\n        error: 'bg-red-50 text-red-800 border border-red-200',\n        info: 'bg-blue-50 text-blue-800 border border-blue-200',\n        warning: 'bg-yellow-50 text-yellow-800 border border-yellow-200'\n      }\n    }\n  },\n  computed: {\n    ...mapState({\n      notification: state => state.notification,\n      isLoading: state => state.isLoading\n    })\n  },\n  methods: {\n    hideNotification() {\n      this.$store.commit('clearNotification')\n    }\n  },\n  created() {\n    // Check for token on app start\n    this.$store.dispatch('checkAuth')\n  }\n}\n</script>\n\n<style>\n/* Make notification popups wider and more readable */\n.fixed.bottom-6.right-6 {\n  min-width: 340px;\n  max-width: 480px;\n  padding: 1.5rem 2.25rem;\n  font-size: 1.1rem;\n  box-sizing: border-box;\n  border-radius: 14px;\n  word-break: break-word;\n}\n</style>"],"mappings":"AA2DA,SAAAA,QAAA;AACA,OAAAC,SAAA;AACA,OAAAC,SAAA;AAEA;EACAC,IAAA;EACAC,UAAA;IACAH,SAAA;IACAC;EACA;EACAG,KAAA;IACA;MACAC,kBAAA;QACAC,OAAA;QACAC,KAAA;QACAC,IAAA;QACAC,OAAA;MACA;IACA;EACA;EACAC,QAAA;IACA,GAAAX,QAAA;MACAY,YAAA,EAAAC,KAAA,IAAAA,KAAA,CAAAD,YAAA;MACAE,SAAA,EAAAD,KAAA,IAAAA,KAAA,CAAAC;IACA;EACA;EACAC,OAAA;IACAC,iBAAA;MACA,KAAAC,MAAA,CAAAC,MAAA;IACA;EACA;EACAC,QAAA;IACA;IACA,KAAAF,MAAA,CAAAG,QAAA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}