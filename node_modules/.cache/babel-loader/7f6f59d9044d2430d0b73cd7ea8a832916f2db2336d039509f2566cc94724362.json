{"ast":null,"code":"import { api } from '@/plugins/axios';\n\n// Add request interceptor for logging\napi.interceptors.request.use(config => {\n  console.log('API Request:', {\n    method: config.method,\n    url: config.url,\n    params: config.params,\n    data: config.data\n  });\n  return config;\n}, error => {\n  console.error('API Request Error:', error);\n  return Promise.reject(error);\n});\n\n// Add response interceptor for logging\napi.interceptors.response.use(response => {\n  // Response is already transformed by the axios instance interceptor\n  console.log('API Response:', {\n    data: response,\n    url: response?.request?.responseURL || 'unknown'\n  });\n  return response;\n}, error => {\n  console.error('API Error:', {\n    status: error.response?.status,\n    data: error.response?.data,\n    url: error.config?.url || 'unknown'\n  });\n  if (error.response?.status === 401) {\n    localStorage.removeItem('token');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\nexport const authAPI = {\n  login: credentials => api.post('/auth/login', credentials),\n  register: userData => api.post('/auth/register', userData),\n  forgotPassword: email => api.post('/auth/forgot-password', {\n    email\n  }),\n  resetPassword: data => api.post('/auth/reset-password', data),\n  verifyToken: () => api.get('/auth/verify')\n};\nexport const userAPI = {\n  getProfile: () => api.get('/users/profile'),\n  updateProfile: data => api.put('/users/profile', data),\n  getBookings: () => api.get('/users/bookings'),\n  getReviews: () => api.get('/users/reviews')\n};\nexport const campingSpotAPI = {\n  getAll: params => api.get('/users/camping-spots', {\n    params\n  }),\n  getById: id => api.get(`/users/camping-spots/${id}`),\n  create: data => api.post('/users/camping-spots', data),\n  update: (id, data) => api.put(`/users/camping-spots/${id}`, data),\n  delete: id => api.delete(`/users/camping-spots/${id}`),\n  getFeatured: () => api.get('/users/camping-spots/featured'),\n  search: params => api.get('/users/camping-spots/search', {\n    params\n  }),\n  getCampingSpots: params => api.get('/users/camping-spots', {\n    params\n  }),\n  checkAvailability: (id, data) => api.post(`/users/camping-spots/${id}/check-availability`, data),\n  createReview: (id, data) => api.post(`/users/camping-spots/${id}/reviews`, data),\n  uploadImages: (id, formData) => api.post(`/users/camping-spots/${id}/images`, formData),\n  deleteImage: (id, imageId) => api.delete(`/users/camping-spots/${id}/images/${imageId}`),\n  createBooking: (id, data) => api.post(`/users/camping-spots/${id}/bookings`, data)\n};\nexport const bookingAPI = {\n  create: data => api.post('/bookings', data),\n  getAll: params => api.get('/bookings', {\n    params\n  }),\n  getById: id => api.get(`/bookings/${id}`),\n  update: (id, data) => api.put(`/bookings/${id}`, data),\n  cancel: id => api.post(`/bookings/${id}/cancel`)\n};\nexport const reviewAPI = {\n  create: data => api.post('/reviews', data),\n  getAll: params => api.get('/reviews', {\n    params\n  }),\n  getById: id => api.get(`/reviews/${id}`),\n  update: (id, data) => api.put(`/reviews/${id}`, data),\n  delete: id => api.delete(`/reviews/${id}`)\n};\nexport const adminAPI = {\n  getDashboardStats: () => api.get('/admin/dashboard/stats'),\n  getAllUsers: params => api.get('/admin/users', {\n    params\n  }),\n  updateUser: (id, data) => api.put(`/admin/users/${id}`, data),\n  deleteUser: id => api.delete(`/admin/users/${id}`),\n  getAllBookings: params => api.get('/admin/bookings', {\n    params\n  }),\n  updateBooking: (id, data) => api.put(`/admin/bookings/${id}`, data),\n  getAllReviews: params => api.get('/admin/reviews', {\n    params\n  }),\n  updateReview: (id, data) => api.put(`/admin/reviews/${id}`, data)\n};\nexport const ownerAPI = {\n  getDashboardStats: () => api.get('/owner/dashboard/stats'),\n  getCampingSpots: () => api.get('/owner/camping-spots'),\n  getCampingSpotById: id => api.get(`/owner/camping-spots/${id}`),\n  createCampingSpot: data => api.post('/owner/camping-spots', data, {\n    headers: {\n      'Content-Type': data instanceof FormData ? 'multipart/form-data' : 'application/json'\n    }\n  }),\n  updateCampingSpot: (id, data) => api.put(`/owner/camping-spots/${id}`, data, {\n    headers: {\n      'Content-Type': data instanceof FormData ? 'multipart/form-data' : 'application/json'\n    }\n  }),\n  deleteCampingSpot: id => api.delete(`/owner/camping-spots/${id}`),\n  getBookings: () => api.get('/users/bookings'),\n  getReviews: () => api.get('/owner/reviews'),\n  uploadImages: (id, formData) => api.post(`/owner/camping-spots/${id}/images`, formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data'\n    }\n  })\n};\nexport default api;","map":{"version":3,"names":["api","interceptors","request","use","config","console","log","method","url","params","data","error","Promise","reject","response","responseURL","status","localStorage","removeItem","window","location","href","authAPI","login","credentials","post","register","userData","forgotPassword","email","resetPassword","verifyToken","get","userAPI","getProfile","updateProfile","put","getBookings","getReviews","campingSpotAPI","getAll","getById","id","create","update","delete","getFeatured","search","getCampingSpots","checkAvailability","createReview","uploadImages","formData","deleteImage","imageId","createBooking","bookingAPI","cancel","reviewAPI","adminAPI","getDashboardStats","getAllUsers","updateUser","deleteUser","getAllBookings","updateBooking","getAllReviews","updateReview","ownerAPI","getCampingSpotById","createCampingSpot","headers","FormData","updateCampingSpot","deleteCampingSpot"],"sources":["C:/Users/pmake/OneDrive - Thomas More/Desktop/Web Programming/Final/project/frontend/src/services/api.js"],"sourcesContent":["import { api } from '@/plugins/axios'\n\n// Add request interceptor for logging\napi.interceptors.request.use(\n  config => {\n    console.log('API Request:', {\n      method: config.method,\n      url: config.url,\n      params: config.params,\n      data: config.data\n    })\n    return config\n  },\n  error => {\n    console.error('API Request Error:', error)\n    return Promise.reject(error)\n  }\n)\n\n// Add response interceptor for logging\napi.interceptors.response.use(\n  response => {\n    // Response is already transformed by the axios instance interceptor\n    console.log('API Response:', {\n      data: response,\n      url: response?.request?.responseURL || 'unknown'\n    })\n    return response\n  },\n  error => {\n    console.error('API Error:', {\n      status: error.response?.status,\n      data: error.response?.data,\n      url: error.config?.url || 'unknown'\n    })\n    if (error.response?.status === 401) {\n      localStorage.removeItem('token')\n      window.location.href = '/login'\n    }\n    return Promise.reject(error)\n  }\n)\n\nexport const authAPI = {\n  login: (credentials) => api.post('/auth/login', credentials),\n  register: (userData) => api.post('/auth/register', userData),\n  forgotPassword: (email) => api.post('/auth/forgot-password', { email }),\n  resetPassword: (data) => api.post('/auth/reset-password', data),\n  verifyToken: () => api.get('/auth/verify')\n}\n\nexport const userAPI = {\n  getProfile: () => api.get('/users/profile'),\n  updateProfile: (data) => api.put('/users/profile', data),\n  getBookings: () => api.get('/users/bookings'),\n  getReviews: () => api.get('/users/reviews')\n}\n\nexport const campingSpotAPI = {\n  getAll: (params) => api.get('/users/camping-spots', { params }),\n  getById: (id) => api.get(`/users/camping-spots/${id}`),\n  create: (data) => api.post('/users/camping-spots', data),\n  update: (id, data) => api.put(`/users/camping-spots/${id}`, data),\n  delete: (id) => api.delete(`/users/camping-spots/${id}`),\n  getFeatured: () => api.get('/users/camping-spots/featured'),\n  search: (params) => api.get('/users/camping-spots/search', { params }),\n  getCampingSpots: (params) => api.get('/users/camping-spots', { params }),\n  checkAvailability: (id, data) => api.post(`/users/camping-spots/${id}/check-availability`, data),\n  createReview: (id, data) => api.post(`/users/camping-spots/${id}/reviews`, data),\n  uploadImages: (id, formData) => api.post(`/users/camping-spots/${id}/images`, formData),\n  deleteImage: (id, imageId) => api.delete(`/users/camping-spots/${id}/images/${imageId}`),\n  createBooking: (id, data) => api.post(`/users/camping-spots/${id}/bookings`, data)\n}\n\nexport const bookingAPI = {\n  create: (data) => api.post('/bookings', data),\n  getAll: (params) => api.get('/bookings', { params }),\n  getById: (id) => api.get(`/bookings/${id}`),\n  update: (id, data) => api.put(`/bookings/${id}`, data),\n  cancel: (id) => api.post(`/bookings/${id}/cancel`)\n}\n\nexport const reviewAPI = {\n  create: (data) => api.post('/reviews', data),\n  getAll: (params) => api.get('/reviews', { params }),\n  getById: (id) => api.get(`/reviews/${id}`),\n  update: (id, data) => api.put(`/reviews/${id}`, data),\n  delete: (id) => api.delete(`/reviews/${id}`)\n}\n\nexport const adminAPI = {\n  getDashboardStats: () => api.get('/admin/dashboard/stats'),\n  getAllUsers: (params) => api.get('/admin/users', { params }),\n  updateUser: (id, data) => api.put(`/admin/users/${id}`, data),\n  deleteUser: (id) => api.delete(`/admin/users/${id}`),\n  getAllBookings: (params) => api.get('/admin/bookings', { params }),\n  updateBooking: (id, data) => api.put(`/admin/bookings/${id}`, data),\n  getAllReviews: (params) => api.get('/admin/reviews', { params }),\n  updateReview: (id, data) => api.put(`/admin/reviews/${id}`, data)\n}\n\nexport const ownerAPI = {\n  getDashboardStats: () => api.get('/owner/dashboard/stats'),\n  getCampingSpots: () => api.get('/owner/camping-spots'),\n  getCampingSpotById: (id) => api.get(`/owner/camping-spots/${id}`),\n  createCampingSpot: (data) => api.post('/owner/camping-spots', data, {\n    headers: {\n      'Content-Type': data instanceof FormData ? 'multipart/form-data' : 'application/json'\n    }\n  }),\n  updateCampingSpot: (id, data) => api.put(`/owner/camping-spots/${id}`, data, {\n    headers: {\n      'Content-Type': data instanceof FormData ? 'multipart/form-data' : 'application/json'\n    }\n  }),\n  deleteCampingSpot: (id) => api.delete(`/owner/camping-spots/${id}`),\n  getBookings: () => api.get('/users/bookings'),\n  getReviews: () => api.get('/owner/reviews'),\n  uploadImages: (id, formData) => api.post(`/owner/camping-spots/${id}/images`, formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data'\n    }\n  })\n}\n\nexport default api "],"mappings":"AAAA,SAASA,GAAG,QAAQ,iBAAiB;;AAErC;AACAA,GAAG,CAACC,YAAY,CAACC,OAAO,CAACC,GAAG,CAC1BC,MAAM,IAAI;EACRC,OAAO,CAACC,GAAG,CAAC,cAAc,EAAE;IAC1BC,MAAM,EAAEH,MAAM,CAACG,MAAM;IACrBC,GAAG,EAAEJ,MAAM,CAACI,GAAG;IACfC,MAAM,EAAEL,MAAM,CAACK,MAAM;IACrBC,IAAI,EAAEN,MAAM,CAACM;EACf,CAAC,CAAC;EACF,OAAON,MAAM;AACf,CAAC,EACDO,KAAK,IAAI;EACPN,OAAO,CAACM,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;EAC1C,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAX,GAAG,CAACC,YAAY,CAACa,QAAQ,CAACX,GAAG,CAC3BW,QAAQ,IAAI;EACV;EACAT,OAAO,CAACC,GAAG,CAAC,eAAe,EAAE;IAC3BI,IAAI,EAAEI,QAAQ;IACdN,GAAG,EAAEM,QAAQ,EAAEZ,OAAO,EAAEa,WAAW,IAAI;EACzC,CAAC,CAAC;EACF,OAAOD,QAAQ;AACjB,CAAC,EACDH,KAAK,IAAI;EACPN,OAAO,CAACM,KAAK,CAAC,YAAY,EAAE;IAC1BK,MAAM,EAAEL,KAAK,CAACG,QAAQ,EAAEE,MAAM;IAC9BN,IAAI,EAAEC,KAAK,CAACG,QAAQ,EAAEJ,IAAI;IAC1BF,GAAG,EAAEG,KAAK,CAACP,MAAM,EAAEI,GAAG,IAAI;EAC5B,CAAC,CAAC;EACF,IAAIG,KAAK,CAACG,QAAQ,EAAEE,MAAM,KAAK,GAAG,EAAE;IAClCC,YAAY,CAACC,UAAU,CAAC,OAAO,CAAC;IAChCC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;EACjC;EACA,OAAOT,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,OAAO,MAAMW,OAAO,GAAG;EACrBC,KAAK,EAAGC,WAAW,IAAKxB,GAAG,CAACyB,IAAI,CAAC,aAAa,EAAED,WAAW,CAAC;EAC5DE,QAAQ,EAAGC,QAAQ,IAAK3B,GAAG,CAACyB,IAAI,CAAC,gBAAgB,EAAEE,QAAQ,CAAC;EAC5DC,cAAc,EAAGC,KAAK,IAAK7B,GAAG,CAACyB,IAAI,CAAC,uBAAuB,EAAE;IAAEI;EAAM,CAAC,CAAC;EACvEC,aAAa,EAAGpB,IAAI,IAAKV,GAAG,CAACyB,IAAI,CAAC,sBAAsB,EAAEf,IAAI,CAAC;EAC/DqB,WAAW,EAAEA,CAAA,KAAM/B,GAAG,CAACgC,GAAG,CAAC,cAAc;AAC3C,CAAC;AAED,OAAO,MAAMC,OAAO,GAAG;EACrBC,UAAU,EAAEA,CAAA,KAAMlC,GAAG,CAACgC,GAAG,CAAC,gBAAgB,CAAC;EAC3CG,aAAa,EAAGzB,IAAI,IAAKV,GAAG,CAACoC,GAAG,CAAC,gBAAgB,EAAE1B,IAAI,CAAC;EACxD2B,WAAW,EAAEA,CAAA,KAAMrC,GAAG,CAACgC,GAAG,CAAC,iBAAiB,CAAC;EAC7CM,UAAU,EAAEA,CAAA,KAAMtC,GAAG,CAACgC,GAAG,CAAC,gBAAgB;AAC5C,CAAC;AAED,OAAO,MAAMO,cAAc,GAAG;EAC5BC,MAAM,EAAG/B,MAAM,IAAKT,GAAG,CAACgC,GAAG,CAAC,sBAAsB,EAAE;IAAEvB;EAAO,CAAC,CAAC;EAC/DgC,OAAO,EAAGC,EAAE,IAAK1C,GAAG,CAACgC,GAAG,CAAC,wBAAwBU,EAAE,EAAE,CAAC;EACtDC,MAAM,EAAGjC,IAAI,IAAKV,GAAG,CAACyB,IAAI,CAAC,sBAAsB,EAAEf,IAAI,CAAC;EACxDkC,MAAM,EAAEA,CAACF,EAAE,EAAEhC,IAAI,KAAKV,GAAG,CAACoC,GAAG,CAAC,wBAAwBM,EAAE,EAAE,EAAEhC,IAAI,CAAC;EACjEmC,MAAM,EAAGH,EAAE,IAAK1C,GAAG,CAAC6C,MAAM,CAAC,wBAAwBH,EAAE,EAAE,CAAC;EACxDI,WAAW,EAAEA,CAAA,KAAM9C,GAAG,CAACgC,GAAG,CAAC,+BAA+B,CAAC;EAC3De,MAAM,EAAGtC,MAAM,IAAKT,GAAG,CAACgC,GAAG,CAAC,6BAA6B,EAAE;IAAEvB;EAAO,CAAC,CAAC;EACtEuC,eAAe,EAAGvC,MAAM,IAAKT,GAAG,CAACgC,GAAG,CAAC,sBAAsB,EAAE;IAAEvB;EAAO,CAAC,CAAC;EACxEwC,iBAAiB,EAAEA,CAACP,EAAE,EAAEhC,IAAI,KAAKV,GAAG,CAACyB,IAAI,CAAC,wBAAwBiB,EAAE,qBAAqB,EAAEhC,IAAI,CAAC;EAChGwC,YAAY,EAAEA,CAACR,EAAE,EAAEhC,IAAI,KAAKV,GAAG,CAACyB,IAAI,CAAC,wBAAwBiB,EAAE,UAAU,EAAEhC,IAAI,CAAC;EAChFyC,YAAY,EAAEA,CAACT,EAAE,EAAEU,QAAQ,KAAKpD,GAAG,CAACyB,IAAI,CAAC,wBAAwBiB,EAAE,SAAS,EAAEU,QAAQ,CAAC;EACvFC,WAAW,EAAEA,CAACX,EAAE,EAAEY,OAAO,KAAKtD,GAAG,CAAC6C,MAAM,CAAC,wBAAwBH,EAAE,WAAWY,OAAO,EAAE,CAAC;EACxFC,aAAa,EAAEA,CAACb,EAAE,EAAEhC,IAAI,KAAKV,GAAG,CAACyB,IAAI,CAAC,wBAAwBiB,EAAE,WAAW,EAAEhC,IAAI;AACnF,CAAC;AAED,OAAO,MAAM8C,UAAU,GAAG;EACxBb,MAAM,EAAGjC,IAAI,IAAKV,GAAG,CAACyB,IAAI,CAAC,WAAW,EAAEf,IAAI,CAAC;EAC7C8B,MAAM,EAAG/B,MAAM,IAAKT,GAAG,CAACgC,GAAG,CAAC,WAAW,EAAE;IAAEvB;EAAO,CAAC,CAAC;EACpDgC,OAAO,EAAGC,EAAE,IAAK1C,GAAG,CAACgC,GAAG,CAAC,aAAaU,EAAE,EAAE,CAAC;EAC3CE,MAAM,EAAEA,CAACF,EAAE,EAAEhC,IAAI,KAAKV,GAAG,CAACoC,GAAG,CAAC,aAAaM,EAAE,EAAE,EAAEhC,IAAI,CAAC;EACtD+C,MAAM,EAAGf,EAAE,IAAK1C,GAAG,CAACyB,IAAI,CAAC,aAAaiB,EAAE,SAAS;AACnD,CAAC;AAED,OAAO,MAAMgB,SAAS,GAAG;EACvBf,MAAM,EAAGjC,IAAI,IAAKV,GAAG,CAACyB,IAAI,CAAC,UAAU,EAAEf,IAAI,CAAC;EAC5C8B,MAAM,EAAG/B,MAAM,IAAKT,GAAG,CAACgC,GAAG,CAAC,UAAU,EAAE;IAAEvB;EAAO,CAAC,CAAC;EACnDgC,OAAO,EAAGC,EAAE,IAAK1C,GAAG,CAACgC,GAAG,CAAC,YAAYU,EAAE,EAAE,CAAC;EAC1CE,MAAM,EAAEA,CAACF,EAAE,EAAEhC,IAAI,KAAKV,GAAG,CAACoC,GAAG,CAAC,YAAYM,EAAE,EAAE,EAAEhC,IAAI,CAAC;EACrDmC,MAAM,EAAGH,EAAE,IAAK1C,GAAG,CAAC6C,MAAM,CAAC,YAAYH,EAAE,EAAE;AAC7C,CAAC;AAED,OAAO,MAAMiB,QAAQ,GAAG;EACtBC,iBAAiB,EAAEA,CAAA,KAAM5D,GAAG,CAACgC,GAAG,CAAC,wBAAwB,CAAC;EAC1D6B,WAAW,EAAGpD,MAAM,IAAKT,GAAG,CAACgC,GAAG,CAAC,cAAc,EAAE;IAAEvB;EAAO,CAAC,CAAC;EAC5DqD,UAAU,EAAEA,CAACpB,EAAE,EAAEhC,IAAI,KAAKV,GAAG,CAACoC,GAAG,CAAC,gBAAgBM,EAAE,EAAE,EAAEhC,IAAI,CAAC;EAC7DqD,UAAU,EAAGrB,EAAE,IAAK1C,GAAG,CAAC6C,MAAM,CAAC,gBAAgBH,EAAE,EAAE,CAAC;EACpDsB,cAAc,EAAGvD,MAAM,IAAKT,GAAG,CAACgC,GAAG,CAAC,iBAAiB,EAAE;IAAEvB;EAAO,CAAC,CAAC;EAClEwD,aAAa,EAAEA,CAACvB,EAAE,EAAEhC,IAAI,KAAKV,GAAG,CAACoC,GAAG,CAAC,mBAAmBM,EAAE,EAAE,EAAEhC,IAAI,CAAC;EACnEwD,aAAa,EAAGzD,MAAM,IAAKT,GAAG,CAACgC,GAAG,CAAC,gBAAgB,EAAE;IAAEvB;EAAO,CAAC,CAAC;EAChE0D,YAAY,EAAEA,CAACzB,EAAE,EAAEhC,IAAI,KAAKV,GAAG,CAACoC,GAAG,CAAC,kBAAkBM,EAAE,EAAE,EAAEhC,IAAI;AAClE,CAAC;AAED,OAAO,MAAM0D,QAAQ,GAAG;EACtBR,iBAAiB,EAAEA,CAAA,KAAM5D,GAAG,CAACgC,GAAG,CAAC,wBAAwB,CAAC;EAC1DgB,eAAe,EAAEA,CAAA,KAAMhD,GAAG,CAACgC,GAAG,CAAC,sBAAsB,CAAC;EACtDqC,kBAAkB,EAAG3B,EAAE,IAAK1C,GAAG,CAACgC,GAAG,CAAC,wBAAwBU,EAAE,EAAE,CAAC;EACjE4B,iBAAiB,EAAG5D,IAAI,IAAKV,GAAG,CAACyB,IAAI,CAAC,sBAAsB,EAAEf,IAAI,EAAE;IAClE6D,OAAO,EAAE;MACP,cAAc,EAAE7D,IAAI,YAAY8D,QAAQ,GAAG,qBAAqB,GAAG;IACrE;EACF,CAAC,CAAC;EACFC,iBAAiB,EAAEA,CAAC/B,EAAE,EAAEhC,IAAI,KAAKV,GAAG,CAACoC,GAAG,CAAC,wBAAwBM,EAAE,EAAE,EAAEhC,IAAI,EAAE;IAC3E6D,OAAO,EAAE;MACP,cAAc,EAAE7D,IAAI,YAAY8D,QAAQ,GAAG,qBAAqB,GAAG;IACrE;EACF,CAAC,CAAC;EACFE,iBAAiB,EAAGhC,EAAE,IAAK1C,GAAG,CAAC6C,MAAM,CAAC,wBAAwBH,EAAE,EAAE,CAAC;EACnEL,WAAW,EAAEA,CAAA,KAAMrC,GAAG,CAACgC,GAAG,CAAC,iBAAiB,CAAC;EAC7CM,UAAU,EAAEA,CAAA,KAAMtC,GAAG,CAACgC,GAAG,CAAC,gBAAgB,CAAC;EAC3CmB,YAAY,EAAEA,CAACT,EAAE,EAAEU,QAAQ,KAAKpD,GAAG,CAACyB,IAAI,CAAC,wBAAwBiB,EAAE,SAAS,EAAEU,QAAQ,EAAE;IACtFmB,OAAO,EAAE;MACP,cAAc,EAAE;IAClB;EACF,CAAC;AACH,CAAC;AAED,eAAevE,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}