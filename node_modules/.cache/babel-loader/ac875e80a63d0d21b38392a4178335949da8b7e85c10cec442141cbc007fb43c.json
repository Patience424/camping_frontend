{"ast":null,"code":"import { campingSpotAPI } from '@/services/api';\nexport default {\n  name: 'OwnerCampingSpotForm',\n  props: {\n    id: {\n      type: [String, Number],\n      default: null\n    }\n  },\n  data() {\n    return {\n      form: {\n        name: '',\n        location: '',\n        description: '',\n        pricePerNight: 0,\n        capacity: 1,\n        amenities: [],\n        images: []\n      },\n      isLoading: false,\n      errors: {},\n      availableAmenities: ['Electricity', 'Water', 'Showers', 'Restrooms', 'Fire Pit', 'Picnic Table', 'RV Hookup', 'WiFi', 'Pets Allowed']\n    };\n  },\n  computed: {\n    isEdit() {\n      return !!this.id;\n    }\n  },\n  async created() {\n    if (this.isEdit) {\n      await this.fetchCampingSpot();\n    }\n  },\n  methods: {\n    async fetchCampingSpot() {\n      try {\n        this.isLoading = true;\n        const response = await campingSpotAPI.getById(this.id);\n        this.form = {\n          ...response.data\n        };\n      } catch (error) {\n        this.$store.commit('setNotification', {\n          type: 'error',\n          message: 'Failed to load camping spot details'\n        });\n      } finally {\n        this.isLoading = false;\n      }\n    },\n    validateForm() {\n      this.errors = {};\n      let isValid = true;\n      if (!this.form.name) {\n        this.errors.name = 'Name is required';\n        isValid = false;\n      }\n      if (!this.form.location) {\n        this.errors.location = 'Location is required';\n        isValid = false;\n      }\n      if (!this.form.description) {\n        this.errors.description = 'Description is required';\n        isValid = false;\n      }\n      if (!this.form.pricePerNight || this.form.pricePerNight <= 0) {\n        this.errors.pricePerNight = 'Price must be greater than 0';\n        isValid = false;\n      }\n      if (!this.form.capacity || this.form.capacity < 1) {\n        this.errors.capacity = 'Capacity must be at least 1';\n        isValid = false;\n      }\n      return isValid;\n    },\n    triggerFileInput() {\n      this.$refs.fileInput.click();\n    },\n    async handleImageUpload(event) {\n      const files = event.target.files;\n      if (!files.length) return;\n      for (const file of files) {\n        if (this.form.images.length >= 5) {\n          alert('Maximum 5 images allowed');\n          break;\n        }\n        if (file.size > 5 * 1024 * 1024) {\n          alert('Image size should be less than 5MB');\n          continue;\n        }\n        try {\n          // TODO: Implement actual image upload to server\n          // For now, we'll create a local URL\n          const imageUrl = URL.createObjectURL(file);\n          this.form.images.push({\n            url: imageUrl,\n            file\n          });\n        } catch (error) {\n          console.error('Error uploading image:', error);\n          alert('Error uploading image');\n        }\n      }\n\n      // Reset the file input\n      event.target.value = '';\n    },\n    removeImage(index) {\n      this.form.images.splice(index, 1);\n    },\n    async handleSubmit() {\n      if (!this.validateForm()) return;\n      try {\n        this.isLoading = true;\n        if (this.isEdit) {\n          await campingSpotAPI.update(this.id, this.form);\n          this.$store.commit('setNotification', {\n            type: 'success',\n            message: 'Camping spot updated successfully'\n          });\n        } else {\n          await campingSpotAPI.create(this.form);\n          this.$store.commit('setNotification', {\n            type: 'success',\n            message: 'Camping spot created successfully'\n          });\n        }\n        this.$router.push('/owner/camping-spots');\n      } catch (error) {\n        const message = error.response?.data?.message || 'Failed to save camping spot';\n        this.$store.commit('setNotification', {\n          type: 'error',\n          message\n        });\n      } finally {\n        this.isLoading = false;\n      }\n    }\n  }\n};","map":{"version":3,"names":["campingSpotAPI","name","props","id","type","String","Number","default","data","form","location","description","pricePerNight","capacity","amenities","images","isLoading","errors","availableAmenities","computed","isEdit","created","fetchCampingSpot","methods","response","getById","error","$store","commit","message","validateForm","isValid","triggerFileInput","$refs","fileInput","click","handleImageUpload","event","files","target","length","file","alert","size","imageUrl","URL","createObjectURL","push","url","console","value","removeImage","index","splice","handleSubmit","update","create","$router"],"sources":["src/views/owner/OwnerCampingSpotForm.vue"],"sourcesContent":["<template>\r\n  <div class=\"camping-spot-form\">\r\n    <h1>{{ isEdit ? 'Edit Camping Spot' : 'Add New Camping Spot' }}</h1>\r\n    \r\n    <form @submit.prevent=\"handleSubmit\" class=\"form\">\r\n      <div class=\"form-group\">\r\n        <label for=\"name\">Name</label>\r\n        <input\r\n          id=\"name\"\r\n          v-model=\"form.name\"\r\n          type=\"text\"\r\n          required\r\n          placeholder=\"Enter camping spot name\"\r\n        >\r\n      </div>\r\n\r\n      <div class=\"form-group\">\r\n        <label for=\"location\">Location</label>\r\n        <input\r\n          id=\"location\"\r\n          v-model=\"form.location\"\r\n          type=\"text\"\r\n          required\r\n          placeholder=\"Enter location\"\r\n        >\r\n      </div>\r\n\r\n      <div class=\"form-group\">\r\n        <label for=\"description\">Description</label>\r\n        <textarea\r\n          id=\"description\"\r\n          v-model=\"form.description\"\r\n          required\r\n          placeholder=\"Describe your camping spot\"\r\n          rows=\"4\"\r\n        ></textarea>\r\n      </div>\r\n\r\n      <div class=\"form-group\">\r\n        <label for=\"pricePerNight\">Price per Night (€)</label>\r\n        <input\r\n          id=\"pricePerNight\"\r\n          v-model.number=\"form.pricePerNight\"\r\n          type=\"number\"\r\n          required\r\n          min=\"0\"\r\n          step=\"0.01\"\r\n        >\r\n      </div>\r\n\r\n      <div class=\"form-group\">\r\n        <label for=\"capacity\">Capacity</label>\r\n        <input\r\n          id=\"capacity\"\r\n          v-model.number=\"form.capacity\"\r\n          type=\"number\"\r\n          required\r\n          min=\"1\"\r\n        >\r\n      </div>\r\n\r\n      <div class=\"form-group\">\r\n        <label for=\"images\">Images</label>\r\n        <div class=\"image-upload-container\">\r\n          <div class=\"image-preview-grid\">\r\n            <div v-for=\"(image, index) in form.images\" :key=\"index\" class=\"image-preview\">\r\n              <img :src=\"image.url\" :alt=\"'Camping spot image ' + (index + 1)\">\r\n              <button type=\"button\" @click=\"removeImage(index)\" class=\"remove-image\">\r\n                ×\r\n              </button>\r\n            </div>\r\n            <div v-if=\"form.images.length < 5\" class=\"image-upload-box\" @click=\"triggerFileInput\">\r\n              <input\r\n                type=\"file\"\r\n                ref=\"fileInput\"\r\n                @change=\"handleImageUpload\"\r\n                accept=\"image/*\"\r\n                multiple\r\n                class=\"hidden\"\r\n              >\r\n              <div class=\"upload-placeholder\">\r\n                <span>+</span>\r\n                <p>Add Image</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <p class=\"image-help-text\">Upload up to 5 images (max 5MB each)</p>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"form-group\">\r\n        <label for=\"amenities\">Amenities</label>\r\n        <div class=\"amenities-grid\">\r\n          <label v-for=\"amenity in availableAmenities\" :key=\"amenity\" class=\"amenity-checkbox\">\r\n            <input\r\n              type=\"checkbox\"\r\n              v-model=\"form.amenities\"\r\n              :value=\"amenity\"\r\n            >\r\n            {{ amenity }}\r\n          </label>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"form-actions\">\r\n        <button type=\"button\" @click=\"$router.back()\" class=\"btn-secondary\">\r\n          Cancel\r\n        </button>\r\n        <button type=\"submit\" class=\"btn-primary\">\r\n          {{ isEdit ? 'Update' : 'Create' }} Camping Spot\r\n        </button>\r\n      </div>\r\n    </form>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { campingSpotAPI } from '@/services/api'\r\n\r\nexport default {\r\n  name: 'OwnerCampingSpotForm',\r\n  props: {\r\n    id: {\r\n      type: [String, Number],\r\n      default: null\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      form: {\r\n        name: '',\r\n        location: '',\r\n        description: '',\r\n        pricePerNight: 0,\r\n        capacity: 1,\r\n        amenities: [],\r\n        images: []\r\n      },\r\n      isLoading: false,\r\n      errors: {},\r\n      availableAmenities: [\r\n        'Electricity',\r\n        'Water',\r\n        'Showers',\r\n        'Restrooms',\r\n        'Fire Pit',\r\n        'Picnic Table',\r\n        'RV Hookup',\r\n        'WiFi',\r\n        'Pets Allowed'\r\n      ]\r\n    }\r\n  },\r\n  computed: {\r\n    isEdit() {\r\n      return !!this.id\r\n    }\r\n  },\r\n  async created() {\r\n    if (this.isEdit) {\r\n      await this.fetchCampingSpot()\r\n    }\r\n  },\r\n  methods: {\r\n    async fetchCampingSpot() {\r\n      try {\r\n        this.isLoading = true\r\n        const response = await campingSpotAPI.getById(this.id)\r\n        this.form = { ...response.data }\r\n      } catch (error) {\r\n        this.$store.commit('setNotification', {\r\n          type: 'error',\r\n          message: 'Failed to load camping spot details'\r\n        })\r\n      } finally {\r\n        this.isLoading = false\r\n      }\r\n    },\r\n    validateForm() {\r\n      this.errors = {}\r\n      let isValid = true\r\n\r\n      if (!this.form.name) {\r\n        this.errors.name = 'Name is required'\r\n        isValid = false\r\n      }\r\n\r\n      if (!this.form.location) {\r\n        this.errors.location = 'Location is required'\r\n        isValid = false\r\n      }\r\n\r\n      if (!this.form.description) {\r\n        this.errors.description = 'Description is required'\r\n        isValid = false\r\n      }\r\n\r\n      if (!this.form.pricePerNight || this.form.pricePerNight <= 0) {\r\n        this.errors.pricePerNight = 'Price must be greater than 0'\r\n        isValid = false\r\n      }\r\n\r\n      if (!this.form.capacity || this.form.capacity < 1) {\r\n        this.errors.capacity = 'Capacity must be at least 1'\r\n        isValid = false\r\n      }\r\n\r\n      return isValid\r\n    },\r\n    triggerFileInput() {\r\n      this.$refs.fileInput.click()\r\n    },\r\n    async handleImageUpload(event) {\r\n      const files = event.target.files\r\n      if (!files.length) return\r\n\r\n      for (const file of files) {\r\n        if (this.form.images.length >= 5) {\r\n          alert('Maximum 5 images allowed')\r\n          break\r\n        }\r\n\r\n        if (file.size > 5 * 1024 * 1024) {\r\n          alert('Image size should be less than 5MB')\r\n          continue\r\n        }\r\n\r\n        try {\r\n          // TODO: Implement actual image upload to server\r\n          // For now, we'll create a local URL\r\n          const imageUrl = URL.createObjectURL(file)\r\n          this.form.images.push({ url: imageUrl, file })\r\n        } catch (error) {\r\n          console.error('Error uploading image:', error)\r\n          alert('Error uploading image')\r\n        }\r\n      }\r\n\r\n      // Reset the file input\r\n      event.target.value = ''\r\n    },\r\n    removeImage(index) {\r\n      this.form.images.splice(index, 1)\r\n    },\r\n    async handleSubmit() {\r\n      if (!this.validateForm()) return\r\n\r\n      try {\r\n        this.isLoading = true\r\n        if (this.isEdit) {\r\n          await campingSpotAPI.update(this.id, this.form)\r\n          this.$store.commit('setNotification', {\r\n            type: 'success',\r\n            message: 'Camping spot updated successfully'\r\n          })\r\n        } else {\r\n          await campingSpotAPI.create(this.form)\r\n          this.$store.commit('setNotification', {\r\n            type: 'success',\r\n            message: 'Camping spot created successfully'\r\n          })\r\n        }\r\n        this.$router.push('/owner/camping-spots')\r\n      } catch (error) {\r\n        const message = error.response?.data?.message || 'Failed to save camping spot'\r\n        this.$store.commit('setNotification', {\r\n          type: 'error',\r\n          message\r\n        })\r\n      } finally {\r\n        this.isLoading = false\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.camping-spot-form {\r\n  max-width: 800px;\r\n  margin: 0 auto;\r\n  padding: 2rem;\r\n}\r\n\r\n.form {\r\n  background: white;\r\n  padding: 2rem;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.form-group {\r\n  margin-bottom: 1.5rem;\r\n}\r\n\r\nlabel {\r\n  display: block;\r\n  margin-bottom: 0.5rem;\r\n  color: #2c3e50;\r\n  font-weight: 500;\r\n}\r\n\r\ninput[type=\"text\"],\r\ninput[type=\"number\"],\r\ninput[type=\"url\"],\r\ntextarea {\r\n  width: 100%;\r\n  padding: 0.75rem;\r\n  border: 1px solid #ddd;\r\n  border-radius: 4px;\r\n  font-size: 1rem;\r\n}\r\n\r\n.amenities-grid {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\r\n  gap: 0.5rem;\r\n}\r\n\r\n.amenity-checkbox {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 0.5rem;\r\n  font-weight: normal;\r\n}\r\n\r\n.form-actions {\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  gap: 1rem;\r\n  margin-top: 2rem;\r\n}\r\n\r\n.btn-primary,\r\n.btn-secondary {\r\n  padding: 0.75rem 1.5rem;\r\n  border-radius: 4px;\r\n  font-weight: 500;\r\n  cursor: pointer;\r\n}\r\n\r\n.btn-primary {\r\n  background: #42b983;\r\n  color: white;\r\n  border: none;\r\n}\r\n\r\n.btn-secondary {\r\n  background: #f3f4f6;\r\n  color: #374151;\r\n  border: 1px solid #d1d5db;\r\n}\r\n\r\n.image-upload-container {\r\n  margin-top: 0.5rem;\r\n}\r\n\r\n.image-preview-grid {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));\r\n  gap: 1rem;\r\n  margin-bottom: 0.5rem;\r\n}\r\n\r\n.image-preview {\r\n  position: relative;\r\n  aspect-ratio: 1;\r\n  border-radius: 4px;\r\n  overflow: hidden;\r\n}\r\n\r\n.image-preview img {\r\n  width: 100%;\r\n  height: 100%;\r\n  object-fit: cover;\r\n}\r\n\r\n.remove-image {\r\n  position: absolute;\r\n  top: 0.25rem;\r\n  right: 0.25rem;\r\n  width: 24px;\r\n  height: 24px;\r\n  border-radius: 50%;\r\n  background: rgba(0, 0, 0, 0.5);\r\n  color: white;\r\n  border: none;\r\n  cursor: pointer;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  font-size: 1.25rem;\r\n  line-height: 1;\r\n}\r\n\r\n.image-upload-box {\r\n  aspect-ratio: 1;\r\n  border: 2px dashed #ddd;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  transition: border-color 0.2s;\r\n}\r\n\r\n.image-upload-box:hover {\r\n  border-color: #42b983;\r\n}\r\n\r\n.upload-placeholder {\r\n  text-align: center;\r\n  color: #666;\r\n}\r\n\r\n.upload-placeholder span {\r\n  font-size: 2rem;\r\n  line-height: 1;\r\n  margin-bottom: 0.5rem;\r\n  color: #42b983;\r\n}\r\n\r\n.upload-placeholder p {\r\n  margin: 0;\r\n  font-size: 0.875rem;\r\n}\r\n\r\n.hidden {\r\n  display: none;\r\n}\r\n\r\n.image-help-text {\r\n  font-size: 0.875rem;\r\n  color: #666;\r\n  margin-top: 0.5rem;\r\n}\r\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}