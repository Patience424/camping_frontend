{"ast":null,"code":"import { api } from '@/plugins/axios';\n\n// Add a response interceptor to handle common errors\napi.interceptors.response.use(response => response, error => {\n  if (error.response) {\n    // Handle 401 Unauthorized errors\n    if (error.response.status === 401) {\n      localStorage.removeItem('token');\n      window.location.href = '/login';\n    }\n  }\n  return Promise.reject(error);\n});\nexport const authAPI = {\n  login: credentials => api.post('/auth/login', credentials),\n  register: userData => api.post('/auth/register', userData),\n  forgotPassword: email => api.post('/auth/forgot-password', {\n    email\n  }),\n  resetPassword: data => api.post('/auth/reset-password', data),\n  verifyToken: () => api.get('/auth/verify')\n};\nexport const userAPI = {\n  getProfile: () => api.get('/users/profile'),\n  updateProfile: data => api.put('/users/profile', data),\n  getBookings: () => api.get('/users/bookings'),\n  getReviews: () => api.get('/users/reviews')\n};\nexport const campingSpotAPI = {\n  getAll: params => api.get('/users/camping-spots', {\n    params\n  }),\n  getById: id => api.get(`/users/camping-spots/${id}`),\n  create: data => api.post('/users/camping-spots', data),\n  update: (id, data) => api.put(`/users/camping-spots/${id}`, data),\n  delete: id => api.delete(`/users/camping-spots/${id}`),\n  getFeatured: () => api.get('/users/camping-spots/featured'),\n  search: params => api.get('/users/camping-spots/search', {\n    params\n  }),\n  getCampingSpots: params => api.get('/users/camping-spots', {\n    params\n  }),\n  checkAvailability: (id, data) => api.post(`/users/camping-spots/${id}/check-availability`, data),\n  createReview: (id, data) => api.post(`/users/camping-spots/${id}/reviews`, data)\n};\nexport const bookingAPI = {\n  create: data => api.post('/bookings', data),\n  getAll: params => api.get('/bookings', {\n    params\n  }),\n  getById: id => api.get(`/bookings/${id}`),\n  update: (id, data) => api.put(`/bookings/${id}`, data),\n  cancel: id => api.post(`/bookings/${id}/cancel`)\n};\nexport const reviewAPI = {\n  create: data => api.post('/reviews', data),\n  getAll: params => api.get('/reviews', {\n    params\n  }),\n  getById: id => api.get(`/reviews/${id}`),\n  update: (id, data) => api.put(`/reviews/${id}`, data),\n  delete: id => api.delete(`/reviews/${id}`)\n};\nexport const adminAPI = {\n  getDashboardStats: () => api.get('/admin/dashboard/stats'),\n  getAllUsers: params => api.get('/admin/users', {\n    params\n  }),\n  updateUser: (id, data) => api.put(`/admin/users/${id}`, data),\n  deleteUser: id => api.delete(`/admin/users/${id}`),\n  getAllBookings: params => api.get('/admin/bookings', {\n    params\n  }),\n  updateBooking: (id, data) => api.put(`/admin/bookings/${id}`, data),\n  getAllReviews: params => api.get('/admin/reviews', {\n    params\n  }),\n  updateReview: (id, data) => api.put(`/admin/reviews/${id}`, data)\n};\nexport const ownerAPI = {\n  getDashboardStats: () => api.get('/owner/dashboard/stats'),\n  getCampingSpots: () => api.get('/owner/camping-spots'),\n  getCampingSpotById: id => api.get(`/owner/camping-spots/${id}`),\n  createCampingSpot: data => api.post('/owner/camping-spots', data),\n  updateCampingSpot: (id, data) => api.put(`/owner/camping-spots/${id}`, data),\n  deleteCampingSpot: id => api.delete(`/owner/camping-spots/${id}`),\n  getBookings: () => api.get('/users/bookings'),\n  getReviews: () => api.get('/owner/reviews')\n};\nexport default api;","map":{"version":3,"names":["api","interceptors","response","use","error","status","localStorage","removeItem","window","location","href","Promise","reject","authAPI","login","credentials","post","register","userData","forgotPassword","email","resetPassword","data","verifyToken","get","userAPI","getProfile","updateProfile","put","getBookings","getReviews","campingSpotAPI","getAll","params","getById","id","create","update","delete","getFeatured","search","getCampingSpots","checkAvailability","createReview","bookingAPI","cancel","reviewAPI","adminAPI","getDashboardStats","getAllUsers","updateUser","deleteUser","getAllBookings","updateBooking","getAllReviews","updateReview","ownerAPI","getCampingSpotById","createCampingSpot","updateCampingSpot","deleteCampingSpot"],"sources":["C:/Users/pmake/OneDrive - Thomas More/Desktop/Web Programming/Final/project/frontend/src/services/api.js"],"sourcesContent":["import { api } from '@/plugins/axios'\n\n// Add a response interceptor to handle common errors\napi.interceptors.response.use(\n  response => response,\n  error => {\n    if (error.response) {\n      // Handle 401 Unauthorized errors\n      if (error.response.status === 401) {\n        localStorage.removeItem('token')\n        window.location.href = '/login'\n      }\n    }\n    return Promise.reject(error)\n  }\n)\n\nexport const authAPI = {\n  login: (credentials) => api.post('/auth/login', credentials),\n  register: (userData) => api.post('/auth/register', userData),\n  forgotPassword: (email) => api.post('/auth/forgot-password', { email }),\n  resetPassword: (data) => api.post('/auth/reset-password', data),\n  verifyToken: () => api.get('/auth/verify')\n}\n\nexport const userAPI = {\n  getProfile: () => api.get('/users/profile'),\n  updateProfile: (data) => api.put('/users/profile', data),\n  getBookings: () => api.get('/users/bookings'),\n  getReviews: () => api.get('/users/reviews')\n}\n\nexport const campingSpotAPI = {\n  getAll: (params) => api.get('/users/camping-spots', { params }),\n  getById: (id) => api.get(`/users/camping-spots/${id}`),\n  create: (data) => api.post('/users/camping-spots', data),\n  update: (id, data) => api.put(`/users/camping-spots/${id}`, data),\n  delete: (id) => api.delete(`/users/camping-spots/${id}`),\n  getFeatured: () => api.get('/users/camping-spots/featured'),\n  search: (params) => api.get('/users/camping-spots/search', { params }),\n  getCampingSpots: (params) => api.get('/users/camping-spots', { params }),\n  checkAvailability: (id, data) => api.post(`/users/camping-spots/${id}/check-availability`, data),\n  createReview: (id, data) => api.post(`/users/camping-spots/${id}/reviews`, data)\n}\n\nexport const bookingAPI = {\n  create: (data) => api.post('/bookings', data),\n  getAll: (params) => api.get('/bookings', { params }),\n  getById: (id) => api.get(`/bookings/${id}`),\n  update: (id, data) => api.put(`/bookings/${id}`, data),\n  cancel: (id) => api.post(`/bookings/${id}/cancel`)\n}\n\nexport const reviewAPI = {\n  create: (data) => api.post('/reviews', data),\n  getAll: (params) => api.get('/reviews', { params }),\n  getById: (id) => api.get(`/reviews/${id}`),\n  update: (id, data) => api.put(`/reviews/${id}`, data),\n  delete: (id) => api.delete(`/reviews/${id}`)\n}\n\nexport const adminAPI = {\n  getDashboardStats: () => api.get('/admin/dashboard/stats'),\n  getAllUsers: (params) => api.get('/admin/users', { params }),\n  updateUser: (id, data) => api.put(`/admin/users/${id}`, data),\n  deleteUser: (id) => api.delete(`/admin/users/${id}`),\n  getAllBookings: (params) => api.get('/admin/bookings', { params }),\n  updateBooking: (id, data) => api.put(`/admin/bookings/${id}`, data),\n  getAllReviews: (params) => api.get('/admin/reviews', { params }),\n  updateReview: (id, data) => api.put(`/admin/reviews/${id}`, data)\n}\n\nexport const ownerAPI = {\n  getDashboardStats: () => api.get('/owner/dashboard/stats'),\n  getCampingSpots: () => api.get('/owner/camping-spots'),\n  getCampingSpotById: (id) => api.get(`/owner/camping-spots/${id}`),\n  createCampingSpot: (data) => api.post('/owner/camping-spots', data),\n  updateCampingSpot: (id, data) => api.put(`/owner/camping-spots/${id}`, data),\n  deleteCampingSpot: (id) => api.delete(`/owner/camping-spots/${id}`),\n  getBookings: () => api.get('/users/bookings'),\n  getReviews: () => api.get('/owner/reviews')\n}\n\nexport default api "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}