{"ast":null,"code":"export default {\n  name: 'OwnerCampingSpots',\n  data() {\n    return {\n      campingSpots: [],\n      currentImageIndex: {}\n    };\n  },\n  async created() {\n    // TODO: Fetch camping spots from API\n    this.campingSpots = [{\n      id: 1,\n      name: 'Mountain View Camp',\n      location: 'Rocky Mountains, CO',\n      pricePerNight: 75,\n      status: 'Active',\n      images: [{\n        url: 'https://example.com/camp1.jpg'\n      }, {\n        url: 'https://example.com/camp2.jpg'\n      }, {\n        url: 'https://example.com/camp3.jpg'\n      }]\n    }, {\n      id: 2,\n      name: 'Lakeside Retreat',\n      location: 'Lake Tahoe, CA',\n      pricePerNight: 95,\n      status: 'Active',\n      images: [{\n        url: 'https://example.com/camp4.jpg'\n      }, {\n        url: 'https://example.com/camp5.jpg'\n      }]\n    }];\n    // Initialize current image index for each spot\n    this.campingSpots.forEach(spot => {\n      this.$set(this.currentImageIndex, spot.id, 0);\n    });\n  },\n  methods: {\n    prevImage(spotId) {\n      if (this.currentImageIndex[spotId] > 0) {\n        this.$set(this.currentImageIndex, spotId, this.currentImageIndex[spotId] - 1);\n      }\n    },\n    nextImage(spotId) {\n      const spot = this.campingSpots.find(s => s.id === spotId);\n      if (this.currentImageIndex[spotId] < spot.images.length - 1) {\n        this.$set(this.currentImageIndex, spotId, this.currentImageIndex[spotId] + 1);\n      }\n    },\n    setImageIndex(spotId, index) {\n      this.$set(this.currentImageIndex, spotId, index);\n    },\n    async deleteSpot(id) {\n      if (confirm('Are you sure you want to delete this camping spot?')) {\n        // TODO: Implement delete functionality\n        this.campingSpots = this.campingSpots.filter(spot => spot.id !== id);\n      }\n    }\n  }\n};","map":{"version":3,"names":["name","data","campingSpots","currentImageIndex","created","id","location","pricePerNight","status","images","url","forEach","spot","$set","methods","prevImage","spotId","nextImage","find","s","length","setImageIndex","index","deleteSpot","confirm","filter"],"sources":["src/views/owner/OwnerCampingSpots.vue"],"sourcesContent":["<template>\r\n  <div class=\"owner-camping-spots\">\r\n    <div class=\"header\">\r\n      <h1>My Camping Spots</h1>\r\n      <router-link to=\"/owner/camping-spots/new\" class=\"btn-primary\">\r\n        Add New Camping Spot\r\n      </router-link>\r\n    </div>\r\n\r\n    <div class=\"spots-list\">\r\n      <div v-if=\"campingSpots.length\" class=\"spots-grid\">\r\n        <div v-for=\"spot in campingSpots\" :key=\"spot.id\" class=\"spot-card\">\r\n          <div class=\"image-carousel\">\r\n            <img \r\n              v-for=\"(image, index) in spot.images\" \r\n              :key=\"index\"\r\n              :src=\"image.url\" \r\n              :alt=\"spot.name\"\r\n              class=\"spot-image\"\r\n              :class=\"{ active: currentImageIndex[spot.id] === index }\"\r\n            >\r\n            <div v-if=\"spot.images.length > 1\" class=\"carousel-controls\">\r\n              <button \r\n                @click=\"prevImage(spot.id)\" \r\n                class=\"carousel-btn prev\"\r\n                :disabled=\"currentImageIndex[spot.id] === 0\"\r\n              >\r\n                ‹\r\n              </button>\r\n              <button \r\n                @click=\"nextImage(spot.id)\" \r\n                class=\"carousel-btn next\"\r\n                :disabled=\"currentImageIndex[spot.id] === spot.images.length - 1\"\r\n              >\r\n                ›\r\n              </button>\r\n            </div>\r\n            <div v-if=\"spot.images.length > 1\" class=\"carousel-dots\">\r\n              <button\r\n                v-for=\"(_, index) in spot.images\"\r\n                :key=\"index\"\r\n                @click=\"setImageIndex(spot.id, index)\"\r\n                class=\"dot\"\r\n                :class=\"{ active: currentImageIndex[spot.id] === index }\"\r\n              ></button>\r\n            </div>\r\n          </div>\r\n          <div class=\"spot-info\">\r\n            <h3>{{ spot.name }}</h3>\r\n            <p class=\"location\">{{ spot.location }}</p>\r\n            <p class=\"price\">€{{ spot.pricePerNight }} per night</p>\r\n            <div class=\"status\" :class=\"spot.status.toLowerCase()\">\r\n              {{ spot.status }}\r\n            </div>\r\n            <div class=\"actions\">\r\n              <router-link :to=\"`/owner/camping-spots/${spot.id}/edit`\" class=\"btn-edit\">\r\n                Edit\r\n              </router-link>\r\n              <button @click=\"deleteSpot(spot.id)\" class=\"btn-delete\">\r\n                Delete\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <p v-else class=\"no-spots\">You haven't added any camping spots yet.</p>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'OwnerCampingSpots',\r\n  data() {\r\n    return {\r\n      campingSpots: [],\r\n      currentImageIndex: {}\r\n    }\r\n  },\r\n  async created() {\r\n    // TODO: Fetch camping spots from API\r\n    this.campingSpots = [\r\n      {\r\n        id: 1,\r\n        name: 'Mountain View Camp',\r\n        location: 'Rocky Mountains, CO',\r\n        pricePerNight: 75,\r\n        status: 'Active',\r\n        images: [\r\n          { url: 'https://example.com/camp1.jpg' },\r\n          { url: 'https://example.com/camp2.jpg' },\r\n          { url: 'https://example.com/camp3.jpg' }\r\n        ]\r\n      },\r\n      {\r\n        id: 2,\r\n        name: 'Lakeside Retreat',\r\n        location: 'Lake Tahoe, CA',\r\n        pricePerNight: 95,\r\n        status: 'Active',\r\n        images: [\r\n          { url: 'https://example.com/camp4.jpg' },\r\n          { url: 'https://example.com/camp5.jpg' }\r\n        ]\r\n      }\r\n    ]\r\n    // Initialize current image index for each spot\r\n    this.campingSpots.forEach(spot => {\r\n      this.$set(this.currentImageIndex, spot.id, 0)\r\n    })\r\n  },\r\n  methods: {\r\n    prevImage(spotId) {\r\n      if (this.currentImageIndex[spotId] > 0) {\r\n        this.$set(this.currentImageIndex, spotId, this.currentImageIndex[spotId] - 1)\r\n      }\r\n    },\r\n    nextImage(spotId) {\r\n      const spot = this.campingSpots.find(s => s.id === spotId)\r\n      if (this.currentImageIndex[spotId] < spot.images.length - 1) {\r\n        this.$set(this.currentImageIndex, spotId, this.currentImageIndex[spotId] + 1)\r\n      }\r\n    },\r\n    setImageIndex(spotId, index) {\r\n      this.$set(this.currentImageIndex, spotId, index)\r\n    },\r\n    async deleteSpot(id) {\r\n      if (confirm('Are you sure you want to delete this camping spot?')) {\r\n        // TODO: Implement delete functionality\r\n        this.campingSpots = this.campingSpots.filter(spot => spot.id !== id)\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.owner-camping-spots {\r\n  padding: 2rem;\r\n}\r\n\r\n.header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 2rem;\r\n}\r\n\r\n.btn-primary {\r\n  background: #42b983;\r\n  color: white;\r\n  padding: 0.75rem 1.5rem;\r\n  border-radius: 4px;\r\n  text-decoration: none;\r\n  font-weight: 500;\r\n}\r\n\r\n.spots-grid {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\r\n  gap: 2rem;\r\n}\r\n\r\n.spot-card {\r\n  background: white;\r\n  border-radius: 8px;\r\n  overflow: hidden;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.image-carousel {\r\n  position: relative;\r\n  width: 100%;\r\n  height: 200px;\r\n  overflow: hidden;\r\n}\r\n\r\n.spot-image {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  object-fit: cover;\r\n  opacity: 0;\r\n  transition: opacity 0.3s ease;\r\n}\r\n\r\n.spot-image.active {\r\n  opacity: 1;\r\n}\r\n\r\n.spot-info {\r\n  padding: 1.5rem;\r\n}\r\n\r\n.spot-info h3 {\r\n  margin: 0 0 0.5rem 0;\r\n  color: #2c3e50;\r\n}\r\n\r\n.location {\r\n  color: #666;\r\n  margin-bottom: 0.5rem;\r\n}\r\n\r\n.price {\r\n  font-weight: bold;\r\n  color: #42b983;\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n.status {\r\n  display: inline-block;\r\n  padding: 0.25rem 0.75rem;\r\n  border-radius: 20px;\r\n  font-size: 0.875rem;\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n.status.active {\r\n  background: #e3fcef;\r\n  color: #42b983;\r\n}\r\n\r\n.status.inactive {\r\n  background: #fee2e2;\r\n  color: #ef4444;\r\n}\r\n\r\n.actions {\r\n  display: flex;\r\n  gap: 1rem;\r\n}\r\n\r\n.btn-edit, .btn-delete {\r\n  padding: 0.5rem 1rem;\r\n  border-radius: 4px;\r\n  text-decoration: none;\r\n  font-weight: 500;\r\n}\r\n\r\n.btn-edit {\r\n  background: #e3fcef;\r\n  color: #42b983;\r\n}\r\n\r\n.btn-delete {\r\n  background: #fee2e2;\r\n  color: #ef4444;\r\n  border: none;\r\n  cursor: pointer;\r\n}\r\n\r\n.no-spots {\r\n  text-align: center;\r\n  color: #666;\r\n  margin-top: 2rem;\r\n}\r\n\r\n.carousel-controls {\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 0;\r\n  right: 0;\r\n  transform: translateY(-50%);\r\n  display: flex;\r\n  justify-content: space-between;\r\n  padding: 0 1rem;\r\n  pointer-events: none;\r\n}\r\n\r\n.carousel-btn {\r\n  width: 32px;\r\n  height: 32px;\r\n  border-radius: 50%;\r\n  background: rgba(255, 255, 255, 0.8);\r\n  border: none;\r\n  cursor: pointer;\r\n  font-size: 1.5rem;\r\n  line-height: 1;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  pointer-events: auto;\r\n  transition: background-color 0.2s;\r\n}\r\n\r\n.carousel-btn:hover {\r\n  background: white;\r\n}\r\n\r\n.carousel-btn:disabled {\r\n  opacity: 0.5;\r\n  cursor: not-allowed;\r\n}\r\n\r\n.carousel-dots {\r\n  position: absolute;\r\n  bottom: 1rem;\r\n  left: 50%;\r\n  transform: translateX(-50%);\r\n  display: flex;\r\n  gap: 0.5rem;\r\n}\r\n\r\n.dot {\r\n  width: 8px;\r\n  height: 8px;\r\n  border-radius: 50%;\r\n  background: rgba(255, 255, 255, 0.5);\r\n  border: none;\r\n  cursor: pointer;\r\n  padding: 0;\r\n  transition: background-color 0.2s;\r\n}\r\n\r\n.dot.active {\r\n  background: white;\r\n}\r\n</style> "],"mappings":"AAuEA;EACAA,IAAA;EACAC,KAAA;IACA;MACAC,YAAA;MACAC,iBAAA;IACA;EACA;EACA,MAAAC,QAAA;IACA;IACA,KAAAF,YAAA,IACA;MACAG,EAAA;MACAL,IAAA;MACAM,QAAA;MACAC,aAAA;MACAC,MAAA;MACAC,MAAA,GACA;QAAAC,GAAA;MAAA,GACA;QAAAA,GAAA;MAAA,GACA;QAAAA,GAAA;MAAA;IAEA,GACA;MACAL,EAAA;MACAL,IAAA;MACAM,QAAA;MACAC,aAAA;MACAC,MAAA;MACAC,MAAA,GACA;QAAAC,GAAA;MAAA,GACA;QAAAA,GAAA;MAAA;IAEA,EACA;IACA;IACA,KAAAR,YAAA,CAAAS,OAAA,CAAAC,IAAA;MACA,KAAAC,IAAA,MAAAV,iBAAA,EAAAS,IAAA,CAAAP,EAAA;IACA;EACA;EACAS,OAAA;IACAC,UAAAC,MAAA;MACA,SAAAb,iBAAA,CAAAa,MAAA;QACA,KAAAH,IAAA,MAAAV,iBAAA,EAAAa,MAAA,OAAAb,iBAAA,CAAAa,MAAA;MACA;IACA;IACAC,UAAAD,MAAA;MACA,MAAAJ,IAAA,QAAAV,YAAA,CAAAgB,IAAA,CAAAC,CAAA,IAAAA,CAAA,CAAAd,EAAA,KAAAW,MAAA;MACA,SAAAb,iBAAA,CAAAa,MAAA,IAAAJ,IAAA,CAAAH,MAAA,CAAAW,MAAA;QACA,KAAAP,IAAA,MAAAV,iBAAA,EAAAa,MAAA,OAAAb,iBAAA,CAAAa,MAAA;MACA;IACA;IACAK,cAAAL,MAAA,EAAAM,KAAA;MACA,KAAAT,IAAA,MAAAV,iBAAA,EAAAa,MAAA,EAAAM,KAAA;IACA;IACA,MAAAC,WAAAlB,EAAA;MACA,IAAAmB,OAAA;QACA;QACA,KAAAtB,YAAA,QAAAA,YAAA,CAAAuB,MAAA,CAAAb,IAAA,IAAAA,IAAA,CAAAP,EAAA,KAAAA,EAAA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}