{"ast":null,"code":"export default {\n  name: 'OwnerCampingSpotForm',\n  props: {\n    id: {\n      type: [String, Number],\n      default: null\n    }\n  },\n  data() {\n    return {\n      form: {\n        name: '',\n        location: '',\n        description: '',\n        pricePerNight: 0,\n        capacity: 1,\n        images: [],\n        amenities: []\n      },\n      availableAmenities: ['Electricity', 'Water', 'Showers', 'Restrooms', 'Fire Pit', 'Picnic Table', 'RV Hookup', 'WiFi', 'Pets Allowed']\n    };\n  },\n  computed: {\n    isEdit() {\n      return !!this.id;\n    }\n  },\n  async created() {\n    if (this.isEdit) {\n      // TODO: Fetch camping spot data from API\n      this.form = {\n        name: 'Mountain View Camp',\n        location: 'Rocky Mountains, CO',\n        description: 'Beautiful mountain view camping spot with amazing scenery.',\n        pricePerNight: 75,\n        capacity: 4,\n        images: [{\n          url: 'https://example.com/camp1.jpg'\n        }, {\n          url: 'https://example.com/camp2.jpg'\n        }],\n        amenities: ['Electricity', 'Water', 'Fire Pit']\n      };\n    }\n  },\n  methods: {\n    triggerFileInput() {\n      this.$refs.fileInput.click();\n    },\n    async handleImageUpload(event) {\n      const files = event.target.files;\n      if (!files.length) return;\n      for (const file of files) {\n        if (this.form.images.length >= 5) {\n          alert('Maximum 5 images allowed');\n          break;\n        }\n        if (file.size > 5 * 1024 * 1024) {\n          alert('Image size should be less than 5MB');\n          continue;\n        }\n        try {\n          // TODO: Implement actual image upload to server\n          // For now, we'll create a local URL\n          const imageUrl = URL.createObjectURL(file);\n          this.form.images.push({\n            url: imageUrl,\n            file\n          });\n        } catch (error) {\n          console.error('Error uploading image:', error);\n          alert('Error uploading image');\n        }\n      }\n\n      // Reset the file input\n      event.target.value = '';\n    },\n    removeImage(index) {\n      this.form.images.splice(index, 1);\n    },\n    async handleSubmit() {\n      try {\n        // TODO: Implement actual image upload to server before saving the form\n        const multipartData = new FormData();\n\n        // Append form data\n        multipartData.append('name', this.form.name);\n        multipartData.append('location', this.form.location);\n        multipartData.append('description', this.form.description);\n        multipartData.append('pricePerNight', this.form.pricePerNight.toString());\n        multipartData.append('capacity', this.form.capacity.toString());\n        multipartData.append('amenities', JSON.stringify(this.form.amenities));\n\n        // Append each image file\n        this.form.images.forEach(image => {\n          if (image.file) {\n            multipartData.append(`images`, image.file);\n          } else if (image.url) {\n            // If it's an existing image URL, keep it\n            multipartData.append('existingImages', image.url);\n          }\n        });\n        if (this.isEdit) {\n          // TODO: Update camping spot\n          console.log('Updating camping spot:', multipartData);\n        } else {\n          // TODO: Create new camping spot\n          console.log('Creating new camping spot:', multipartData);\n        }\n        this.$router.push('/owner/camping-spots');\n      } catch (error) {\n        console.error('Error saving camping spot:', error);\n      }\n    }\n  }\n};","map":{"version":3,"names":["name","props","id","type","String","Number","default","data","form","location","description","pricePerNight","capacity","images","amenities","availableAmenities","computed","isEdit","created","url","methods","triggerFileInput","$refs","fileInput","click","handleImageUpload","event","files","target","length","file","alert","size","imageUrl","URL","createObjectURL","push","error","console","value","removeImage","index","splice","handleSubmit","multipartData","FormData","append","toString","JSON","stringify","forEach","image","log","$router"],"sources":["src/views/owner/OwnerCampingSpotForm.vue"],"sourcesContent":["<template>\r\n  <div class=\"camping-spot-form\">\r\n    <h1>{{ isEdit ? 'Edit Camping Spot' : 'Add New Camping Spot' }}</h1>\r\n    \r\n    <form @submit.prevent=\"handleSubmit\" class=\"form\">\r\n      <div class=\"form-group\">\r\n        <label for=\"name\">Name</label>\r\n        <input\r\n          id=\"name\"\r\n          v-model=\"form.name\"\r\n          type=\"text\"\r\n          required\r\n          placeholder=\"Enter camping spot name\"\r\n        >\r\n      </div>\r\n\r\n      <div class=\"form-group\">\r\n        <label for=\"location\">Location</label>\r\n        <input\r\n          id=\"location\"\r\n          v-model=\"form.location\"\r\n          type=\"text\"\r\n          required\r\n          placeholder=\"Enter location\"\r\n        >\r\n      </div>\r\n\r\n      <div class=\"form-group\">\r\n        <label for=\"description\">Description</label>\r\n        <textarea\r\n          id=\"description\"\r\n          v-model=\"form.description\"\r\n          required\r\n          placeholder=\"Describe your camping spot\"\r\n          rows=\"4\"\r\n        ></textarea>\r\n      </div>\r\n\r\n      <div class=\"form-group\">\r\n        <label for=\"pricePerNight\">Price per Night (€)</label>\r\n        <input\r\n          id=\"pricePerNight\"\r\n          v-model.number=\"form.pricePerNight\"\r\n          type=\"number\"\r\n          required\r\n          min=\"0\"\r\n          step=\"0.01\"\r\n        >\r\n      </div>\r\n\r\n      <div class=\"form-group\">\r\n        <label for=\"capacity\">Capacity</label>\r\n        <input\r\n          id=\"capacity\"\r\n          v-model.number=\"form.capacity\"\r\n          type=\"number\"\r\n          required\r\n          min=\"1\"\r\n        >\r\n      </div>\r\n\r\n      <div class=\"form-group\">\r\n        <label for=\"images\">Images</label>\r\n        <div class=\"image-upload-container\">\r\n          <div class=\"image-preview-grid\">\r\n            <div v-for=\"(image, index) in form.images\" :key=\"index\" class=\"image-preview\">\r\n              <img :src=\"image.url\" :alt=\"'Camping spot image ' + (index + 1)\">\r\n              <button type=\"button\" @click=\"removeImage(index)\" class=\"remove-image\">\r\n                ×\r\n              </button>\r\n            </div>\r\n            <div v-if=\"form.images.length < 5\" class=\"image-upload-box\" @click=\"triggerFileInput\">\r\n              <input\r\n                type=\"file\"\r\n                ref=\"fileInput\"\r\n                @change=\"handleImageUpload\"\r\n                accept=\"image/*\"\r\n                multiple\r\n                class=\"hidden\"\r\n              >\r\n              <div class=\"upload-placeholder\">\r\n                <span>+</span>\r\n                <p>Add Image</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <p class=\"image-help-text\">Upload up to 5 images (max 5MB each)</p>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"form-group\">\r\n        <label for=\"amenities\">Amenities</label>\r\n        <div class=\"amenities-grid\">\r\n          <label v-for=\"amenity in availableAmenities\" :key=\"amenity\" class=\"amenity-checkbox\">\r\n            <input\r\n              type=\"checkbox\"\r\n              v-model=\"form.amenities\"\r\n              :value=\"amenity\"\r\n            >\r\n            {{ amenity }}\r\n          </label>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"form-actions\">\r\n        <button type=\"button\" @click=\"$router.back()\" class=\"btn-secondary\">\r\n          Cancel\r\n        </button>\r\n        <button type=\"submit\" class=\"btn-primary\">\r\n          {{ isEdit ? 'Update' : 'Create' }} Camping Spot\r\n        </button>\r\n      </div>\r\n    </form>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'OwnerCampingSpotForm',\r\n  props: {\r\n    id: {\r\n      type: [String, Number],\r\n      default: null\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      form: {\r\n        name: '',\r\n        location: '',\r\n        description: '',\r\n        pricePerNight: 0,\r\n        capacity: 1,\r\n        images: [],\r\n        amenities: []\r\n      },\r\n      availableAmenities: [\r\n        'Electricity',\r\n        'Water',\r\n        'Showers',\r\n        'Restrooms',\r\n        'Fire Pit',\r\n        'Picnic Table',\r\n        'RV Hookup',\r\n        'WiFi',\r\n        'Pets Allowed'\r\n      ]\r\n    }\r\n  },\r\n  computed: {\r\n    isEdit() {\r\n      return !!this.id\r\n    }\r\n  },\r\n  async created() {\r\n    if (this.isEdit) {\r\n      // TODO: Fetch camping spot data from API\r\n      this.form = {\r\n        name: 'Mountain View Camp',\r\n        location: 'Rocky Mountains, CO',\r\n        description: 'Beautiful mountain view camping spot with amazing scenery.',\r\n        pricePerNight: 75,\r\n        capacity: 4,\r\n        images: [\r\n          { url: 'https://example.com/camp1.jpg' },\r\n          { url: 'https://example.com/camp2.jpg' }\r\n        ],\r\n        amenities: ['Electricity', 'Water', 'Fire Pit']\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    triggerFileInput() {\r\n      this.$refs.fileInput.click()\r\n    },\r\n    async handleImageUpload(event) {\r\n      const files = event.target.files\r\n      if (!files.length) return\r\n\r\n      for (const file of files) {\r\n        if (this.form.images.length >= 5) {\r\n          alert('Maximum 5 images allowed')\r\n          break\r\n        }\r\n\r\n        if (file.size > 5 * 1024 * 1024) {\r\n          alert('Image size should be less than 5MB')\r\n          continue\r\n        }\r\n\r\n        try {\r\n          // TODO: Implement actual image upload to server\r\n          // For now, we'll create a local URL\r\n          const imageUrl = URL.createObjectURL(file)\r\n          this.form.images.push({ url: imageUrl, file })\r\n        } catch (error) {\r\n          console.error('Error uploading image:', error)\r\n          alert('Error uploading image')\r\n        }\r\n      }\r\n\r\n      // Reset the file input\r\n      event.target.value = ''\r\n    },\r\n    removeImage(index) {\r\n      this.form.images.splice(index, 1)\r\n    },\r\n    async handleSubmit() {\r\n      try {\r\n        // TODO: Implement actual image upload to server before saving the form\r\n        const multipartData = new FormData()\r\n\r\n        // Append form data\r\n        multipartData.append('name', this.form.name)\r\n        multipartData.append('location', this.form.location)\r\n        multipartData.append('description', this.form.description)\r\n        multipartData.append('pricePerNight', this.form.pricePerNight.toString())\r\n        multipartData.append('capacity', this.form.capacity.toString())\r\n        multipartData.append('amenities', JSON.stringify(this.form.amenities))\r\n\r\n        // Append each image file\r\n        this.form.images.forEach((image) => {\r\n          if (image.file) {\r\n            multipartData.append(`images`, image.file)\r\n          } else if (image.url) {\r\n            // If it's an existing image URL, keep it\r\n            multipartData.append('existingImages', image.url)\r\n          }\r\n        })\r\n\r\n        if (this.isEdit) {\r\n          // TODO: Update camping spot\r\n          console.log('Updating camping spot:', multipartData)\r\n        } else {\r\n          // TODO: Create new camping spot\r\n          console.log('Creating new camping spot:', multipartData)\r\n        }\r\n        this.$router.push('/owner/camping-spots')\r\n      } catch (error) {\r\n        console.error('Error saving camping spot:', error)\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.camping-spot-form {\r\n  max-width: 800px;\r\n  margin: 0 auto;\r\n  padding: 2rem;\r\n}\r\n\r\n.form {\r\n  background: white;\r\n  padding: 2rem;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.form-group {\r\n  margin-bottom: 1.5rem;\r\n}\r\n\r\nlabel {\r\n  display: block;\r\n  margin-bottom: 0.5rem;\r\n  color: #2c3e50;\r\n  font-weight: 500;\r\n}\r\n\r\ninput[type=\"text\"],\r\ninput[type=\"number\"],\r\ninput[type=\"url\"],\r\ntextarea {\r\n  width: 100%;\r\n  padding: 0.75rem;\r\n  border: 1px solid #ddd;\r\n  border-radius: 4px;\r\n  font-size: 1rem;\r\n}\r\n\r\n.amenities-grid {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\r\n  gap: 0.5rem;\r\n}\r\n\r\n.amenity-checkbox {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 0.5rem;\r\n  font-weight: normal;\r\n}\r\n\r\n.form-actions {\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  gap: 1rem;\r\n  margin-top: 2rem;\r\n}\r\n\r\n.btn-primary,\r\n.btn-secondary {\r\n  padding: 0.75rem 1.5rem;\r\n  border-radius: 4px;\r\n  font-weight: 500;\r\n  cursor: pointer;\r\n}\r\n\r\n.btn-primary {\r\n  background: #42b983;\r\n  color: white;\r\n  border: none;\r\n}\r\n\r\n.btn-secondary {\r\n  background: #f3f4f6;\r\n  color: #374151;\r\n  border: 1px solid #d1d5db;\r\n}\r\n\r\n.image-upload-container {\r\n  margin-top: 0.5rem;\r\n}\r\n\r\n.image-preview-grid {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));\r\n  gap: 1rem;\r\n  margin-bottom: 0.5rem;\r\n}\r\n\r\n.image-preview {\r\n  position: relative;\r\n  aspect-ratio: 1;\r\n  border-radius: 4px;\r\n  overflow: hidden;\r\n}\r\n\r\n.image-preview img {\r\n  width: 100%;\r\n  height: 100%;\r\n  object-fit: cover;\r\n}\r\n\r\n.remove-image {\r\n  position: absolute;\r\n  top: 0.25rem;\r\n  right: 0.25rem;\r\n  width: 24px;\r\n  height: 24px;\r\n  border-radius: 50%;\r\n  background: rgba(0, 0, 0, 0.5);\r\n  color: white;\r\n  border: none;\r\n  cursor: pointer;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  font-size: 1.25rem;\r\n  line-height: 1;\r\n}\r\n\r\n.image-upload-box {\r\n  aspect-ratio: 1;\r\n  border: 2px dashed #ddd;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  transition: border-color 0.2s;\r\n}\r\n\r\n.image-upload-box:hover {\r\n  border-color: #42b983;\r\n}\r\n\r\n.upload-placeholder {\r\n  text-align: center;\r\n  color: #666;\r\n}\r\n\r\n.upload-placeholder span {\r\n  font-size: 2rem;\r\n  line-height: 1;\r\n  margin-bottom: 0.5rem;\r\n  color: #42b983;\r\n}\r\n\r\n.upload-placeholder p {\r\n  margin: 0;\r\n  font-size: 0.875rem;\r\n}\r\n\r\n.hidden {\r\n  display: none;\r\n}\r\n\r\n.image-help-text {\r\n  font-size: 0.875rem;\r\n  color: #666;\r\n  margin-top: 0.5rem;\r\n}\r\n</style> "],"mappings":"AAqHA;EACAA,IAAA;EACAC,KAAA;IACAC,EAAA;MACAC,IAAA,GAAAC,MAAA,EAAAC,MAAA;MACAC,OAAA;IACA;EACA;EACAC,KAAA;IACA;MACAC,IAAA;QACAR,IAAA;QACAS,QAAA;QACAC,WAAA;QACAC,aAAA;QACAC,QAAA;QACAC,MAAA;QACAC,SAAA;MACA;MACAC,kBAAA,GACA,eACA,SACA,WACA,aACA,YACA,gBACA,aACA,QACA;IAEA;EACA;EACAC,QAAA;IACAC,OAAA;MACA,cAAAf,EAAA;IACA;EACA;EACA,MAAAgB,QAAA;IACA,SAAAD,MAAA;MACA;MACA,KAAAT,IAAA;QACAR,IAAA;QACAS,QAAA;QACAC,WAAA;QACAC,aAAA;QACAC,QAAA;QACAC,MAAA,GACA;UAAAM,GAAA;QAAA,GACA;UAAAA,GAAA;QAAA,EACA;QACAL,SAAA;MACA;IACA;EACA;EACAM,OAAA;IACAC,iBAAA;MACA,KAAAC,KAAA,CAAAC,SAAA,CAAAC,KAAA;IACA;IACA,MAAAC,kBAAAC,KAAA;MACA,MAAAC,KAAA,GAAAD,KAAA,CAAAE,MAAA,CAAAD,KAAA;MACA,KAAAA,KAAA,CAAAE,MAAA;MAEA,WAAAC,IAAA,IAAAH,KAAA;QACA,SAAAnB,IAAA,CAAAK,MAAA,CAAAgB,MAAA;UACAE,KAAA;UACA;QACA;QAEA,IAAAD,IAAA,CAAAE,IAAA;UACAD,KAAA;UACA;QACA;QAEA;UACA;UACA;UACA,MAAAE,QAAA,GAAAC,GAAA,CAAAC,eAAA,CAAAL,IAAA;UACA,KAAAtB,IAAA,CAAAK,MAAA,CAAAuB,IAAA;YAAAjB,GAAA,EAAAc,QAAA;YAAAH;UAAA;QACA,SAAAO,KAAA;UACAC,OAAA,CAAAD,KAAA,2BAAAA,KAAA;UACAN,KAAA;QACA;MACA;;MAEA;MACAL,KAAA,CAAAE,MAAA,CAAAW,KAAA;IACA;IACAC,YAAAC,KAAA;MACA,KAAAjC,IAAA,CAAAK,MAAA,CAAA6B,MAAA,CAAAD,KAAA;IACA;IACA,MAAAE,aAAA;MACA;QACA;QACA,MAAAC,aAAA,OAAAC,QAAA;;QAEA;QACAD,aAAA,CAAAE,MAAA,cAAAtC,IAAA,CAAAR,IAAA;QACA4C,aAAA,CAAAE,MAAA,kBAAAtC,IAAA,CAAAC,QAAA;QACAmC,aAAA,CAAAE,MAAA,qBAAAtC,IAAA,CAAAE,WAAA;QACAkC,aAAA,CAAAE,MAAA,uBAAAtC,IAAA,CAAAG,aAAA,CAAAoC,QAAA;QACAH,aAAA,CAAAE,MAAA,kBAAAtC,IAAA,CAAAI,QAAA,CAAAmC,QAAA;QACAH,aAAA,CAAAE,MAAA,cAAAE,IAAA,CAAAC,SAAA,MAAAzC,IAAA,CAAAM,SAAA;;QAEA;QACA,KAAAN,IAAA,CAAAK,MAAA,CAAAqC,OAAA,CAAAC,KAAA;UACA,IAAAA,KAAA,CAAArB,IAAA;YACAc,aAAA,CAAAE,MAAA,WAAAK,KAAA,CAAArB,IAAA;UACA,WAAAqB,KAAA,CAAAhC,GAAA;YACA;YACAyB,aAAA,CAAAE,MAAA,mBAAAK,KAAA,CAAAhC,GAAA;UACA;QACA;QAEA,SAAAF,MAAA;UACA;UACAqB,OAAA,CAAAc,GAAA,2BAAAR,aAAA;QACA;UACA;UACAN,OAAA,CAAAc,GAAA,+BAAAR,aAAA;QACA;QACA,KAAAS,OAAA,CAAAjB,IAAA;MACA,SAAAC,KAAA;QACAC,OAAA,CAAAD,KAAA,+BAAAA,KAAA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}