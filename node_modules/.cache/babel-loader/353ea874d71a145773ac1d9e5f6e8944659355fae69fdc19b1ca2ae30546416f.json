{"ast":null,"code":"import { mapState } from 'vuex';\nexport default {\n  name: 'LoginPage',\n  data() {\n    return {\n      credentials: {\n        email: '',\n        password: ''\n      },\n      showPassword: false,\n      rememberMe: false,\n      errors: {\n        email: '',\n        password: ''\n      }\n    };\n  },\n  computed: {\n    ...mapState({\n      isLoading: state => state.isLoading\n    })\n  },\n  methods: {\n    validateForm() {\n      let isValid = true;\n      this.errors = {\n        email: '',\n        password: ''\n      };\n      if (!this.credentials.email) {\n        this.errors.email = 'Email is required';\n        isValid = false;\n      } else if (!/\\S+@\\S+\\.\\S+/.test(this.credentials.email)) {\n        this.errors.email = 'Please enter a valid email address';\n        isValid = false;\n      }\n      if (!this.credentials.password) {\n        this.errors.password = 'Password is required';\n        isValid = false;\n      }\n      return isValid;\n    },\n    async login() {\n      if (!this.validateForm()) return;\n      try {\n        console.log('Attempting login with credentials:', this.credentials);\n        const user = await this.$store.dispatch('login', this.credentials);\n        console.log('Login successful, user:', user);\n\n        // Redirect based on user role\n        if (user.role === 'ADMIN') {\n          this.$router.push('/admin/dashboard');\n        } else if (user.role === 'OWNER') {\n          this.$router.push('/owner/dashboard');\n        } else {\n          // Get the redirect URL from query parameters or go to the home page\n          const redirectUrl = this.$route.query.redirect || '/';\n          this.$router.push(redirectUrl);\n        }\n      } catch (error) {\n        console.error('Login error details:', {\n          error,\n          response: error.response,\n          data: error.response?.data,\n          status: error.response?.status\n        });\n        if (error.response && error.response.data) {\n          const {\n            message\n          } = error.response.data;\n          if (message.includes('email')) {\n            this.errors.email = message;\n          } else if (message.includes('password')) {\n            this.errors.password = message;\n          } else {\n            this.$store.commit('setNotification', {\n              type: 'error',\n              message: message || 'Failed to sign in'\n            });\n          }\n        } else {\n          this.$store.commit('setNotification', {\n            type: 'error',\n            message: 'An error occurred during sign in'\n          });\n        }\n      }\n    }\n  }\n};","map":{"version":3,"names":["mapState","name","data","credentials","email","password","showPassword","rememberMe","errors","computed","isLoading","state","methods","validateForm","isValid","test","login","console","log","user","$store","dispatch","role","$router","push","redirectUrl","$route","query","redirect","error","response","status","message","includes","commit","type"],"sources":["src/views/auth/Login.vue"],"sourcesContent":["<template>\n  <div class=\"min-h-screen bg-neutral-50 py-12 px-4 sm:px-6 lg:px-8 flex items-center\">\n    <div class=\"max-w-md w-full mx-auto space-y-8\">\n      <div class=\"text-center\">\n        <h1 class=\"text-3xl font-bold text-neutral-900 mb-2\">Sign in to your account</h1>\n        <p class=\"text-neutral-600\">\n          Welcome back! Please enter your details.\n        </p>\n      </div>\n      \n      <div class=\"bg-white py-8 px-4 shadow-md sm:rounded-lg sm:px-10\">\n        <form class=\"space-y-6\" @submit.prevent=\"login\">\n          <div>\n            <label for=\"email\" class=\"form-label\">Email address</label>\n            <input \n              id=\"email\" \n              v-model=\"credentials.email\" \n              type=\"email\" \n              required \n              class=\"form-input\" \n              :class=\"{ 'border-red-300': errors.email }\"\n            >\n            <p v-if=\"errors.email\" class=\"form-error\">{{ errors.email }}</p>\n          </div>\n          \n          <div>\n            <label for=\"password\" class=\"form-label\">Password</label>\n            <div class=\"relative\">\n              <input \n                id=\"password\" \n                v-model=\"credentials.password\" \n                :type=\"showPassword ? 'text' : 'password'\" \n                required \n                class=\"form-input pr-10\"\n                :class=\"{ 'border-red-300': errors.password }\"\n                autocomplete=\"current-password\"\n              >\n              <button \n                type=\"button\"\n                class=\"absolute inset-y-0 right-0 pr-3 flex items-center text-neutral-400 hover:text-neutral-600\"\n                @click=\"showPassword = !showPassword\"\n              >\n                <svg v-if=\"showPassword\" class=\"h-5 w-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.88 9.88l-3.29-3.29m7.532 7.532l3.29 3.29M3 3l3.59 3.59m0 0A9.953 9.953 0 0112 5c4.478 0 8.268 2.943 9.543 7a10.025 10.025 0 01-4.132 5.411m0 0L21 21\" />\n                </svg>\n                <svg v-else class=\"h-5 w-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\" />\n                  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z\" />\n                </svg>\n              </button>\n            </div>\n            <p v-if=\"errors.password\" class=\"form-error\">{{ errors.password }}</p>\n          </div>\n          \n          <div class=\"flex items-center justify-between\">\n            <div class=\"flex items-center\">\n              <input\n                id=\"remember-me\"\n                v-model=\"rememberMe\"\n                type=\"checkbox\"\n                class=\"h-4 w-4 text-primary-600 focus:ring-primary-500 border-neutral-300 rounded\"\n              >\n              <label for=\"remember-me\" class=\"ml-2 block text-sm text-neutral-600\">\n                Remember me\n              </label>\n            </div>\n            \n            <div class=\"text-sm\">\n              <router-link to=\"/forgot-password\" class=\"text-primary-600 hover:text-primary-500\">\n                Forgot your password?\n              </router-link>\n            </div>\n          </div>\n          \n          <div>\n            <button \n              type=\"submit\" \n              class=\"w-full btn-primary py-3 text-base\"\n              :disabled=\"isLoading\"\n            >\n              <span v-if=\"isLoading\">\n                <svg class=\"animate-spin -ml-1 mr-2 h-4 w-4 text-white inline-block\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n                  <circle class=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" stroke-width=\"4\"></circle>\n                  <path class=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n                </svg>\n                Signing in...\n              </span>\n              <span v-else>Sign in</span>\n            </button>\n          </div>\n        </form>\n        \n        <div class=\"mt-6\">\n          <div class=\"relative\">\n            <div class=\"absolute inset-0 flex items-center\">\n              <div class=\"w-full border-t border-neutral-300\"></div>\n            </div>\n            <div class=\"relative flex justify-center text-sm\">\n              <span class=\"px-2 bg-white text-neutral-500\">\n                Or continue with\n              </span>\n            </div>\n          </div>\n          \n          <div class=\"mt-6 grid grid-cols-1 gap-3\">\n            <div>\n              <a href=\"#\" class=\"w-full inline-flex justify-center py-2 px-4 border border-neutral-300 rounded-md shadow-sm bg-white text-sm font-medium text-neutral-700 hover:bg-neutral-50\">\n                <svg class=\"w-5 h-5 mr-2\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                  <path d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\" fill=\"#4285F4\"/>\n                  <path d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\" fill=\"#34A853\"/>\n                  <path d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\" fill=\"#FBBC05\"/>\n                  <path d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\" fill=\"#EA4335\"/>\n                </svg>\n                Sign in with Google\n              </a>\n            </div>\n          </div>\n        </div>\n        \n        <div class=\"mt-6 text-center\">\n          <p class=\"text-sm text-neutral-600\">\n            Don't have an account?\n            <router-link to=\"/register\" class=\"font-medium text-primary-600 hover:text-primary-500\">\n              Sign up\n            </router-link>\n          </p>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex'\n\nexport default {\n  name: 'LoginPage',\n  data() {\n    return {\n      credentials: {\n        email: '',\n        password: ''\n      },\n      showPassword: false,\n      rememberMe: false,\n      errors: {\n        email: '',\n        password: ''\n      }\n    }\n  },\n  computed: {\n    ...mapState({\n      isLoading: state => state.isLoading\n    })\n  },\n  methods: {\n    validateForm() {\n      let isValid = true\n      this.errors = {\n        email: '',\n        password: ''\n      }\n      \n      if (!this.credentials.email) {\n        this.errors.email = 'Email is required'\n        isValid = false\n      } else if (!/\\S+@\\S+\\.\\S+/.test(this.credentials.email)) {\n        this.errors.email = 'Please enter a valid email address'\n        isValid = false\n      }\n      \n      if (!this.credentials.password) {\n        this.errors.password = 'Password is required'\n        isValid = false\n      }\n      \n      return isValid\n    },\n    \n    async login() {\n      if (!this.validateForm()) return\n      \n      try {\n        console.log('Attempting login with credentials:', this.credentials)\n        const user = await this.$store.dispatch('login', this.credentials)\n        console.log('Login successful, user:', user)\n        \n        // Redirect based on user role\n        if (user.role === 'ADMIN') {\n          this.$router.push('/admin/dashboard')\n        } else if (user.role === 'OWNER') {\n          this.$router.push('/owner/dashboard')\n        } else {\n          // Get the redirect URL from query parameters or go to the home page\n          const redirectUrl = this.$route.query.redirect || '/'\n          this.$router.push(redirectUrl)\n        }\n      } catch (error) {\n        console.error('Login error details:', {\n          error,\n          response: error.response,\n          data: error.response?.data,\n          status: error.response?.status\n        })\n        \n        if (error.response && error.response.data) {\n          const { message } = error.response.data\n          \n          if (message.includes('email')) {\n            this.errors.email = message\n          } else if (message.includes('password')) {\n            this.errors.password = message\n          } else {\n            this.$store.commit('setNotification', {\n              type: 'error',\n              message: message || 'Failed to sign in'\n            })\n          }\n        } else {\n          this.$store.commit('setNotification', {\n            type: 'error',\n            message: 'An error occurred during sign in'\n          })\n        }\n      }\n    }\n  }\n}\n</script>"],"mappings":"AAqIA,SAAAA,QAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,WAAA;QACAC,KAAA;QACAC,QAAA;MACA;MACAC,YAAA;MACAC,UAAA;MACAC,MAAA;QACAJ,KAAA;QACAC,QAAA;MACA;IACA;EACA;EACAI,QAAA;IACA,GAAAT,QAAA;MACAU,SAAA,EAAAC,KAAA,IAAAA,KAAA,CAAAD;IACA;EACA;EACAE,OAAA;IACAC,aAAA;MACA,IAAAC,OAAA;MACA,KAAAN,MAAA;QACAJ,KAAA;QACAC,QAAA;MACA;MAEA,UAAAF,WAAA,CAAAC,KAAA;QACA,KAAAI,MAAA,CAAAJ,KAAA;QACAU,OAAA;MACA,2BAAAC,IAAA,MAAAZ,WAAA,CAAAC,KAAA;QACA,KAAAI,MAAA,CAAAJ,KAAA;QACAU,OAAA;MACA;MAEA,UAAAX,WAAA,CAAAE,QAAA;QACA,KAAAG,MAAA,CAAAH,QAAA;QACAS,OAAA;MACA;MAEA,OAAAA,OAAA;IACA;IAEA,MAAAE,MAAA;MACA,UAAAH,YAAA;MAEA;QACAI,OAAA,CAAAC,GAAA,4CAAAf,WAAA;QACA,MAAAgB,IAAA,cAAAC,MAAA,CAAAC,QAAA,eAAAlB,WAAA;QACAc,OAAA,CAAAC,GAAA,4BAAAC,IAAA;;QAEA;QACA,IAAAA,IAAA,CAAAG,IAAA;UACA,KAAAC,OAAA,CAAAC,IAAA;QACA,WAAAL,IAAA,CAAAG,IAAA;UACA,KAAAC,OAAA,CAAAC,IAAA;QACA;UACA;UACA,MAAAC,WAAA,QAAAC,MAAA,CAAAC,KAAA,CAAAC,QAAA;UACA,KAAAL,OAAA,CAAAC,IAAA,CAAAC,WAAA;QACA;MACA,SAAAI,KAAA;QACAZ,OAAA,CAAAY,KAAA;UACAA,KAAA;UACAC,QAAA,EAAAD,KAAA,CAAAC,QAAA;UACA5B,IAAA,EAAA2B,KAAA,CAAAC,QAAA,EAAA5B,IAAA;UACA6B,MAAA,EAAAF,KAAA,CAAAC,QAAA,EAAAC;QACA;QAEA,IAAAF,KAAA,CAAAC,QAAA,IAAAD,KAAA,CAAAC,QAAA,CAAA5B,IAAA;UACA;YAAA8B;UAAA,IAAAH,KAAA,CAAAC,QAAA,CAAA5B,IAAA;UAEA,IAAA8B,OAAA,CAAAC,QAAA;YACA,KAAAzB,MAAA,CAAAJ,KAAA,GAAA4B,OAAA;UACA,WAAAA,OAAA,CAAAC,QAAA;YACA,KAAAzB,MAAA,CAAAH,QAAA,GAAA2B,OAAA;UACA;YACA,KAAAZ,MAAA,CAAAc,MAAA;cACAC,IAAA;cACAH,OAAA,EAAAA,OAAA;YACA;UACA;QACA;UACA,KAAAZ,MAAA,CAAAc,MAAA;YACAC,IAAA;YACAH,OAAA;UACA;QACA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}