{"ast":null,"code":"import { mapState } from 'vuex';\nexport default {\n  name: 'UserProfile',\n  data() {\n    return {\n      formData: {\n        name: '',\n        phoneNumber: '',\n        bio: ''\n      },\n      passwordData: {\n        currentPassword: '',\n        newPassword: '',\n        confirmPassword: ''\n      },\n      errors: {},\n      passwordErrors: {},\n      isLoading: false,\n      isChangingPassword: false\n    };\n  },\n  computed: {\n    ...mapState({\n      user: state => state.user\n    })\n  },\n  methods: {\n    initializeForm() {\n      this.formData = {\n        name: this.user?.name || '',\n        phoneNumber: this.user?.phoneNumber || '',\n        bio: this.user?.bio || ''\n      };\n    },\n    validateForm() {\n      this.errors = {};\n      let isValid = true;\n      if (!this.formData.name) {\n        this.errors.name = 'Name is required';\n        isValid = false;\n      }\n      return isValid;\n    },\n    validatePasswordForm() {\n      this.passwordErrors = {};\n      let isValid = true;\n      if (!this.passwordData.currentPassword) {\n        this.passwordErrors.currentPassword = 'Current password is required';\n        isValid = false;\n      }\n      if (!this.passwordData.newPassword) {\n        this.passwordErrors.newPassword = 'New password is required';\n        isValid = false;\n      } else if (this.passwordData.newPassword.length < 8) {\n        this.passwordErrors.newPassword = 'Password must be at least 8 characters';\n        isValid = false;\n      }\n      if (!this.passwordData.confirmPassword) {\n        this.passwordErrors.confirmPassword = 'Please confirm your new password';\n        isValid = false;\n      } else if (this.passwordData.newPassword !== this.passwordData.confirmPassword) {\n        this.passwordErrors.confirmPassword = 'Passwords do not match';\n        isValid = false;\n      }\n      return isValid;\n    },\n    async updateProfile() {\n      if (!this.validateForm()) return;\n      try {\n        this.isLoading = true;\n        await this.$store.dispatch('updateProfile', this.formData);\n        this.$store.commit('setNotification', {\n          type: 'success',\n          message: 'Profile updated successfully'\n        });\n      } catch (error) {\n        if (error.response?.data?.message) {\n          this.$store.commit('setNotification', {\n            type: 'error',\n            message: error.response.data.message\n          });\n        }\n      } finally {\n        this.isLoading = false;\n      }\n    },\n    async changePassword() {\n      if (!this.validatePasswordForm()) return;\n      try {\n        this.isChangingPassword = true;\n        await this.$store.dispatch('changePassword', {\n          currentPassword: this.passwordData.currentPassword,\n          newPassword: this.passwordData.newPassword\n        });\n\n        // Clear password form\n        this.passwordData = {\n          currentPassword: '',\n          newPassword: '',\n          confirmPassword: ''\n        };\n        this.$store.commit('setNotification', {\n          type: 'success',\n          message: 'Password changed successfully'\n        });\n      } catch (error) {\n        if (error.response?.data?.message) {\n          this.passwordErrors.currentPassword = error.response.data.message;\n        }\n      } finally {\n        this.isChangingPassword = false;\n      }\n    },\n    async confirmDeleteAccount() {\n      if (confirm('Are you sure you want to delete your account? This action cannot be undone.')) {\n        try {\n          await this.$axios.delete('/users/account');\n          this.$store.dispatch('logout');\n          this.$router.push('/');\n          this.$store.commit('setNotification', {\n            type: 'success',\n            message: 'Your account has been deleted'\n          });\n        } catch (error) {\n          this.$store.commit('setNotification', {\n            type: 'error',\n            message: error.response?.data?.message || 'Error deleting account'\n          });\n        }\n      }\n    }\n  },\n  created() {\n    this.initializeForm();\n  },\n  watch: {\n    user() {\n      this.initializeForm();\n    }\n  }\n};","map":{"version":3,"names":["mapState","name","data","formData","phoneNumber","bio","passwordData","currentPassword","newPassword","confirmPassword","errors","passwordErrors","isLoading","isChangingPassword","computed","user","state","methods","initializeForm","validateForm","isValid","validatePasswordForm","length","updateProfile","$store","dispatch","commit","type","message","error","response","changePassword","confirmDeleteAccount","confirm","$axios","delete","$router","push","created","watch"],"sources":["src/views/user/UserProfile.vue"],"sourcesContent":["<template>\n  <div class=\"min-h-screen bg-neutral-50 py-8\">\n    <div class=\"container mx-auto px-4\">\n      <h1 class=\"text-3xl font-bold mb-8\">Your Profile</h1>\n      \n      <div class=\"bg-white rounded-lg shadow-md p-6\">\n        <form @submit.prevent=\"updateProfile\" class=\"max-w-2xl\">\n          <!-- Profile Picture -->\n          <div class=\"mb-6\">\n            <div class=\"flex items-center\">\n              <div v-if=\"user?.avatar\" class=\"h-20 w-20 rounded-full overflow-hidden\">\n                <img :src=\"user.avatar\" alt=\"Profile picture\" class=\"h-full w-full object-cover\">\n              </div>\n              <div v-else class=\"h-20 w-20 rounded-full bg-primary-100 flex items-center justify-center text-primary-700 text-2xl font-semibold\">\n                {{ user?.name?.[0]?.toUpperCase() || 'U' }}\n              </div>\n              <button type=\"button\" class=\"ml-4 text-sm text-primary-600 hover:text-primary-500\">\n                Change picture\n              </button>\n            </div>\n          </div>\n          \n          <!-- Name -->\n          <div class=\"mb-6\">\n            <label for=\"name\" class=\"form-label\">Name</label>\n            <input \n              id=\"name\" \n              v-model=\"formData.name\" \n              type=\"text\" \n              class=\"form-input\"\n              :class=\"{ 'border-red-300': errors.name }\"\n            >\n            <p v-if=\"errors.name\" class=\"form-error\">{{ errors.name }}</p>\n          </div>\n          \n          <!-- Email -->\n          <div class=\"mb-6\">\n            <label for=\"email\" class=\"form-label\">Email</label>\n            <input \n              id=\"email\" \n              :value=\"user?.email\" \n              type=\"email\" \n              class=\"form-input bg-neutral-50\" \n              disabled\n            >\n            <p class=\"text-sm text-neutral-500 mt-1\">Email cannot be changed</p>\n          </div>\n          \n          <!-- Phone -->\n          <div class=\"mb-6\">\n            <label for=\"phone\" class=\"form-label\">Phone number</label>\n            <input \n              id=\"phone\" \n              v-model=\"formData.phoneNumber\" \n              type=\"tel\" \n              class=\"form-input\"\n              :class=\"{ 'border-red-300': errors.phoneNumber }\"\n            >\n            <p v-if=\"errors.phoneNumber\" class=\"form-error\">{{ errors.phoneNumber }}</p>\n          </div>\n          \n          <!-- Bio -->\n          <div class=\"mb-6\">\n            <label for=\"bio\" class=\"form-label\">Bio</label>\n            <textarea \n              id=\"bio\" \n              v-model=\"formData.bio\" \n              rows=\"4\" \n              class=\"form-input\"\n              :class=\"{ 'border-red-300': errors.bio }\"\n            ></textarea>\n            <p v-if=\"errors.bio\" class=\"form-error\">{{ errors.bio }}</p>\n          </div>\n          \n          <!-- Submit Button -->\n          <div class=\"flex justify-end\">\n            <button \n              type=\"submit\" \n              class=\"btn-primary\"\n              :disabled=\"isLoading\"\n            >\n              <span v-if=\"isLoading\">\n                <svg class=\"animate-spin -ml-1 mr-2 h-4 w-4 text-white inline-block\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n                  <circle class=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" stroke-width=\"4\"></circle>\n                  <path class=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n                </svg>\n                Saving...\n              </span>\n              <span v-else>Save Changes</span>\n            </button>\n          </div>\n        </form>\n        \n        <!-- Change Password Section -->\n        <div class=\"mt-12 pt-8 border-t\">\n          <h2 class=\"text-xl font-semibold mb-6\">Change Password</h2>\n          \n          <form @submit.prevent=\"changePassword\" class=\"max-w-2xl\">\n            <div class=\"mb-6\">\n              <label for=\"currentPassword\" class=\"form-label\">Current Password</label>\n              <input \n                id=\"currentPassword\" \n                v-model=\"passwordData.currentPassword\" \n                type=\"password\" \n                class=\"form-input\"\n                :class=\"{ 'border-red-300': passwordErrors.currentPassword }\"\n              >\n              <p v-if=\"passwordErrors.currentPassword\" class=\"form-error\">{{ passwordErrors.currentPassword }}</p>\n            </div>\n            \n            <div class=\"mb-6\">\n              <label for=\"newPassword\" class=\"form-label\">New Password</label>\n              <input \n                id=\"newPassword\" \n                v-model=\"passwordData.newPassword\" \n                type=\"password\" \n                class=\"form-input\"\n                :class=\"{ 'border-red-300': passwordErrors.newPassword }\"\n              >\n              <p v-if=\"passwordErrors.newPassword\" class=\"form-error\">{{ passwordErrors.newPassword }}</p>\n            </div>\n            \n            <div class=\"mb-6\">\n              <label for=\"confirmPassword\" class=\"form-label\">Confirm New Password</label>\n              <input \n                id=\"confirmPassword\" \n                v-model=\"passwordData.confirmPassword\" \n                type=\"password\" \n                class=\"form-input\"\n                :class=\"{ 'border-red-300': passwordErrors.confirmPassword }\"\n              >\n              <p v-if=\"passwordErrors.confirmPassword\" class=\"form-error\">{{ passwordErrors.confirmPassword }}</p>\n            </div>\n            \n            <div class=\"flex justify-end\">\n              <button \n                type=\"submit\" \n                class=\"btn-primary\"\n                :disabled=\"isChangingPassword\"\n              >\n                <span v-if=\"isChangingPassword\">\n                  <svg class=\"animate-spin -ml-1 mr-2 h-4 w-4 text-white inline-block\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n                    <circle class=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" stroke-width=\"4\"></circle>\n                    <path class=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n                  </svg>\n                  Changing Password...\n                </span>\n                <span v-else>Change Password</span>\n              </button>\n            </div>\n          </form>\n        </div>\n        \n        <!-- Delete Account Section -->\n        <div class=\"mt-12 pt-8 border-t\">\n          <h2 class=\"text-xl font-semibold mb-4 text-error\">Delete Account</h2>\n          <p class=\"text-neutral-600 mb-4\">\n            Once you delete your account, there is no going back. Please be certain.\n          </p>\n          <button \n            @click=\"confirmDeleteAccount\" \n            class=\"btn bg-error text-white hover:bg-error/90\"\n          >\n            Delete Account\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex'\n\nexport default {\n  name: 'UserProfile',\n  data() {\n    return {\n      formData: {\n        name: '',\n        phoneNumber: '',\n        bio: ''\n      },\n      passwordData: {\n        currentPassword: '',\n        newPassword: '',\n        confirmPassword: ''\n      },\n      errors: {},\n      passwordErrors: {},\n      isLoading: false,\n      isChangingPassword: false\n    }\n  },\n  computed: {\n    ...mapState({\n      user: state => state.user\n    })\n  },\n  methods: {\n    initializeForm() {\n      this.formData = {\n        name: this.user?.name || '',\n        phoneNumber: this.user?.phoneNumber || '',\n        bio: this.user?.bio || ''\n      }\n    },\n    \n    validateForm() {\n      this.errors = {}\n      let isValid = true\n      \n      if (!this.formData.name) {\n        this.errors.name = 'Name is required'\n        isValid = false\n      }\n      \n      return isValid\n    },\n    \n    validatePasswordForm() {\n      this.passwordErrors = {}\n      let isValid = true\n      \n      if (!this.passwordData.currentPassword) {\n        this.passwordErrors.currentPassword = 'Current password is required'\n        isValid = false\n      }\n      \n      if (!this.passwordData.newPassword) {\n        this.passwordErrors.newPassword = 'New password is required'\n        isValid = false\n      } else if (this.passwordData.newPassword.length < 8) {\n        this.passwordErrors.newPassword = 'Password must be at least 8 characters'\n        isValid = false\n      }\n      \n      if (!this.passwordData.confirmPassword) {\n        this.passwordErrors.confirmPassword = 'Please confirm your new password'\n        isValid = false\n      } else if (this.passwordData.newPassword !== this.passwordData.confirmPassword) {\n        this.passwordErrors.confirmPassword = 'Passwords do not match'\n        isValid = false\n      }\n      \n      return isValid\n    },\n    \n    async updateProfile() {\n      if (!this.validateForm()) return\n      \n      try {\n        this.isLoading = true\n        await this.$store.dispatch('updateProfile', this.formData)\n        \n        this.$store.commit('setNotification', {\n          type: 'success',\n          message: 'Profile updated successfully'\n        })\n      } catch (error) {\n        if (error.response?.data?.message) {\n          this.$store.commit('setNotification', {\n            type: 'error',\n            message: error.response.data.message\n          })\n        }\n      } finally {\n        this.isLoading = false\n      }\n    },\n    \n    async changePassword() {\n      if (!this.validatePasswordForm()) return\n      \n      try {\n        this.isChangingPassword = true\n        await this.$store.dispatch('changePassword', {\n          currentPassword: this.passwordData.currentPassword,\n          newPassword: this.passwordData.newPassword\n        })\n        \n        // Clear password form\n        this.passwordData = {\n          currentPassword: '',\n          newPassword: '',\n          confirmPassword: ''\n        }\n        \n        this.$store.commit('setNotification', {\n          type: 'success',\n          message: 'Password changed successfully'\n        })\n      } catch (error) {\n        if (error.response?.data?.message) {\n          this.passwordErrors.currentPassword = error.response.data.message\n        }\n      } finally {\n        this.isChangingPassword = false\n      }\n    },\n    \n    async confirmDeleteAccount() {\n      if (confirm('Are you sure you want to delete your account? This action cannot be undone.')) {\n        try {\n          await this.$axios.delete('/users/account')\n          this.$store.dispatch('logout')\n          this.$router.push('/')\n          this.$store.commit('setNotification', {\n            type: 'success',\n            message: 'Your account has been deleted'\n          })\n        } catch (error) {\n          this.$store.commit('setNotification', {\n            type: 'error',\n            message: error.response?.data?.message || 'Error deleting account'\n          })\n        }\n      }\n    }\n  },\n  created() {\n    this.initializeForm()\n  },\n  watch: {\n    user() {\n      this.initializeForm()\n    }\n  }\n}\n</script>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}