{"ast":null,"code":"import { ownerAPI } from '@/services/api';\nimport { mapState } from 'vuex';\nexport default {\n  name: 'OwnerDashboard',\n  data() {\n    return {\n      totalSpots: 0,\n      activeBookings: 0,\n      totalRevenue: 0,\n      recentBookings: [],\n      isLoading: false\n    };\n  },\n  computed: {\n    ...mapState({\n      user: state => state.user\n    })\n  },\n  async created() {\n    await this.fetchDashboardData();\n  },\n  methods: {\n    formatStatus(status) {\n      if (!status) return 'Unknown';\n      // Convert status to title case and handle special cases\n      const statusMap = {\n        'PENDING': 'Pending',\n        'CONFIRMED': 'Confirmed',\n        'CANCELLED': 'Cancelled',\n        'COMPLETED': 'Completed'\n      };\n      return statusMap[status] || status.charAt(0).toUpperCase() + status.slice(1).toLowerCase();\n    },\n    async updateBookingStatus(bookingId, newStatus) {\n      try {\n        await ownerAPI.updateBookingStatus(bookingId, newStatus);\n        // Refresh the dashboard data\n        await this.fetchDashboardData();\n        this.$store.commit('setNotification', {\n          type: 'success',\n          message: `Booking ${newStatus.toLowerCase()} successfully`\n        });\n      } catch (error) {\n        console.error('Error updating booking status:', error);\n        this.$store.commit('setNotification', {\n          type: 'error',\n          message: 'Failed to update booking status'\n        });\n      }\n    },\n    async fetchDashboardData() {\n      try {\n        this.isLoading = true;\n        console.log('Fetching dashboard data...');\n        const [statsResponse, bookingsResponse] = await Promise.all([ownerAPI.getDashboardStats().catch(error => {\n          console.error('Error fetching dashboard stats:', error);\n          return {\n            stats: {\n              totalSpots: 0,\n              activeBookings: 0,\n              totalRevenue: 0\n            }\n          };\n        }), ownerAPI.getBookings().catch(error => {\n          console.error('Error fetching bookings:', error);\n          return {\n            data: []\n          };\n        })]);\n        console.log('Raw stats response:', statsResponse);\n        console.log('Raw bookings response:', bookingsResponse);\n\n        // Extract stats from the nested response\n        const stats = statsResponse?.stats || {};\n        console.log('Extracted stats:', stats);\n\n        // Update stats with defensive checks using the correct property names\n        this.totalSpots = stats.campingSpotCount || 0;\n        this.activeBookings = stats.activeBookings || 0;\n        this.totalRevenue = stats.revenue?.completed || 0;\n\n        // Extract bookings from the nested response\n        const bookings = bookingsResponse?.data || [];\n        console.log('Extracted bookings:', bookings);\n        this.recentBookings = bookings.slice(0, 5).map(booking => {\n          console.log('Processing booking:', booking);\n          return {\n            id: booking?.id || 'unknown',\n            campingSpotName: booking?.campingSpot?.name || booking?.spotName || 'Unknown Spot',\n            guestName: booking?.user?.name || booking?.userName || 'Unknown Guest',\n            checkIn: booking?.startDate || booking?.checkIn ? new Date(booking.startDate || booking.checkIn).toLocaleDateString() : 'Unknown',\n            checkOut: booking?.endDate || booking?.checkOut ? new Date(booking.endDate || booking.checkOut).toLocaleDateString() : 'Unknown',\n            status: booking?.status || 'Unknown',\n            total: booking?.totalPrice || booking?.total || 0 // Updated to use totalPrice\n          };\n        });\n        console.log('Processed dashboard stats:', {\n          totalSpots: this.totalSpots,\n          activeBookings: this.activeBookings,\n          totalRevenue: this.totalRevenue\n        });\n        console.log('Processed recent bookings:', this.recentBookings);\n      } catch (error) {\n        console.error('Error in fetchDashboardData:', error);\n        this.$store.commit('setNotification', {\n          type: 'error',\n          message: 'Failed to load dashboard data'\n        });\n      } finally {\n        this.isLoading = false;\n      }\n    }\n  }\n};","map":{"version":3,"names":["ownerAPI","mapState","name","data","totalSpots","activeBookings","totalRevenue","recentBookings","isLoading","computed","user","state","created","fetchDashboardData","methods","formatStatus","status","statusMap","charAt","toUpperCase","slice","toLowerCase","updateBookingStatus","bookingId","newStatus","$store","commit","type","message","error","console","log","statsResponse","bookingsResponse","Promise","all","getDashboardStats","catch","stats","getBookings","campingSpotCount","revenue","completed","bookings","map","booking","id","campingSpotName","campingSpot","spotName","guestName","userName","checkIn","startDate","Date","toLocaleDateString","checkOut","endDate","total","totalPrice"],"sources":["src/views/owner/OwnerDashboard.vue"],"sourcesContent":["<template>\n  <div class=\"owner-dashboard\">\n    <div class=\"dashboard-header\">\n      <div class=\"owner-profile\">\n        <div class=\"profile-avatar\">\n          <div v-if=\"user?.avatar\" class=\"avatar-image\">\n            <img :src=\"user.avatar\" alt=\"Profile picture\">\n          </div>\n          <div v-else class=\"avatar-placeholder\">\n            {{ user?.name?.[0]?.toUpperCase() || 'O' }}\n          </div>\n        </div>\n        <div class=\"profile-info\">\n          <h1>Welcome, {{ user?.name || 'Owner' }}</h1>\n          <p>{{ user?.email }}</p>\n        </div>\n      </div>\n    </div>\n    \n    <div v-if=\"isLoading\" class=\"loading\">\n      <div class=\"spinner\"></div>\n      <p>Loading dashboard data...</p>\n    </div>\n    \n    <template v-else>\n      <div class=\"dashboard-stats\">\n        <div class=\"stat-card\">\n          <h3>Total Camping Spots</h3>\n          <p class=\"stat-number\">{{ totalSpots }}</p>\n        </div>\n        <div class=\"stat-card\">\n          <h3>Active Bookings</h3>\n          <p class=\"stat-number\">{{ activeBookings }}</p>\n        </div>\n        <div class=\"stat-card\">\n          <h3>Total Revenue</h3>\n          <p class=\"stat-number\">€{{ totalRevenue.toFixed(2) }}</p>\n        </div>\n      </div>\n      \n      <div class=\"recent-bookings\">\n        <h2>Recent Bookings</h2>\n        <div v-if=\"recentBookings.length\" class=\"bookings-list\">\n          <div v-for=\"booking in recentBookings\" :key=\"booking.id\" class=\"booking-card\">\n            <div class=\"booking-header\">\n              <h4>{{ booking.campingSpotName }}</h4>\n              <span class=\"status-badge\" :class=\"booking.status.toLowerCase()\">\n                {{ formatStatus(booking.status) }}\n              </span>\n            </div>\n            <div class=\"booking-details\">\n              <p><strong>Guest:</strong> {{ booking.guestName }}</p>\n              <p><strong>Dates:</strong> {{ booking.checkIn }} - {{ booking.checkOut }}</p>\n              <p><strong>Total:</strong> €{{ booking.total.toFixed(2) }}</p>\n              <div class=\"booking-actions\" v-if=\"booking.status === 'PENDING'\">\n                <button @click=\"updateBookingStatus(booking.id, 'CONFIRMED')\" class=\"btn-confirm\">\n                  Confirm Booking\n                </button>\n                <button @click=\"updateBookingStatus(booking.id, 'CANCELLED')\" class=\"btn-cancel\">\n                  Cancel Booking\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n        <p v-else>No recent bookings</p>\n      </div>\n    </template>\n  </div>\n</template>\n\n<script>\nimport { ownerAPI } from '@/services/api'\nimport { mapState } from 'vuex'\n\nexport default {\n  name: 'OwnerDashboard',\n  data() {\n    return {\n      totalSpots: 0,\n      activeBookings: 0,\n      totalRevenue: 0,\n      recentBookings: [],\n      isLoading: false\n    }\n  },\n  computed: {\n    ...mapState({\n      user: state => state.user\n    })\n  },\n  async created() {\n    await this.fetchDashboardData()\n  },\n  methods: {\n    formatStatus(status) {\n      if (!status) return 'Unknown'\n      // Convert status to title case and handle special cases\n      const statusMap = {\n        'PENDING': 'Pending',\n        'CONFIRMED': 'Confirmed',\n        'CANCELLED': 'Cancelled',\n        'COMPLETED': 'Completed'\n      }\n      return statusMap[status] || status.charAt(0).toUpperCase() + status.slice(1).toLowerCase()\n    },\n    async updateBookingStatus(bookingId, newStatus) {\n      try {\n        await ownerAPI.updateBookingStatus(bookingId, newStatus)\n        // Refresh the dashboard data\n        await this.fetchDashboardData()\n        this.$store.commit('setNotification', {\n          type: 'success',\n          message: `Booking ${newStatus.toLowerCase()} successfully`\n        })\n      } catch (error) {\n        console.error('Error updating booking status:', error)\n        this.$store.commit('setNotification', {\n          type: 'error',\n          message: 'Failed to update booking status'\n        })\n      }\n    },\n    async fetchDashboardData() {\n      try {\n        this.isLoading = true\n        console.log('Fetching dashboard data...')\n        \n        const [statsResponse, bookingsResponse] = await Promise.all([\n          ownerAPI.getDashboardStats().catch(error => {\n            console.error('Error fetching dashboard stats:', error)\n            return { stats: { totalSpots: 0, activeBookings: 0, totalRevenue: 0 } }\n          }),\n          ownerAPI.getBookings().catch(error => {\n            console.error('Error fetching bookings:', error)\n            return { data: [] }\n          })\n        ])\n\n        console.log('Raw stats response:', statsResponse)\n        console.log('Raw bookings response:', bookingsResponse)\n\n        // Extract stats from the nested response\n        const stats = statsResponse?.stats || {}\n        console.log('Extracted stats:', stats)\n\n        // Update stats with defensive checks using the correct property names\n        this.totalSpots = stats.campingSpotCount || 0\n        this.activeBookings = stats.activeBookings || 0\n        this.totalRevenue = stats.revenue?.completed || 0\n\n        // Extract bookings from the nested response\n        const bookings = bookingsResponse?.data || []\n        console.log('Extracted bookings:', bookings)\n        \n        this.recentBookings = bookings.slice(0, 5).map(booking => {\n          console.log('Processing booking:', booking)\n          return {\n            id: booking?.id || 'unknown',\n            campingSpotName: booking?.campingSpot?.name || booking?.spotName || 'Unknown Spot',\n            guestName: booking?.user?.name || booking?.userName || 'Unknown Guest',\n            checkIn: booking?.startDate || booking?.checkIn ? new Date(booking.startDate || booking.checkIn).toLocaleDateString() : 'Unknown',\n            checkOut: booking?.endDate || booking?.checkOut ? new Date(booking.endDate || booking.checkOut).toLocaleDateString() : 'Unknown',\n            status: booking?.status || 'Unknown',\n            total: booking?.totalPrice || booking?.total || 0  // Updated to use totalPrice\n          }\n        })\n\n        console.log('Processed dashboard stats:', {\n          totalSpots: this.totalSpots,\n          activeBookings: this.activeBookings,\n          totalRevenue: this.totalRevenue\n        })\n        console.log('Processed recent bookings:', this.recentBookings)\n      } catch (error) {\n        console.error('Error in fetchDashboardData:', error)\n        this.$store.commit('setNotification', {\n          type: 'error',\n          message: 'Failed to load dashboard data'\n        })\n      } finally {\n        this.isLoading = false\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\n.owner-dashboard {\n  padding: 2rem;\n}\n\n.dashboard-header {\n  margin-bottom: 2rem;\n}\n\n.owner-profile {\n  display: flex;\n  align-items: center;\n  gap: 1.5rem;\n  padding: 1.5rem;\n  background: white;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n.profile-avatar {\n  width: 80px;\n  height: 80px;\n  border-radius: 50%;\n  overflow: hidden;\n}\n\n.avatar-image {\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n}\n\n.avatar-placeholder {\n  width: 100%;\n  height: 100%;\n  background: #42b983;\n  color: white;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  font-weight: bold;\n}\n\n.profile-info h1 {\n  margin: 0;\n  font-size: 1.5rem;\n  color: #2c3e50;\n}\n\n.profile-info p {\n  margin: 0.25rem 0 0 0;\n  color: #666;\n}\n\n.loading {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  min-height: 200px;\n}\n\n.spinner {\n  width: 40px;\n  height: 40px;\n  border: 4px solid #f3f3f3;\n  border-top: 4px solid #42b983;\n  border-radius: 50%;\n  animation: spin 1s linear infinite;\n  margin-bottom: 1rem;\n}\n\n@keyframes spin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}\n\n.dashboard-stats {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n  gap: 1.5rem;\n  margin-bottom: 2rem;\n}\n\n.stat-card {\n  background: white;\n  padding: 1.5rem;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n.stat-card h3 {\n  margin: 0 0 0.5rem 0;\n  color: #666;\n  font-size: 1rem;\n}\n\n.stat-number {\n  font-size: 2rem;\n  font-weight: bold;\n  color: #2c3e50;\n  margin: 0;\n}\n\n.recent-bookings {\n  background: white;\n  padding: 1.5rem;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n.recent-bookings h2 {\n  margin: 0 0 1rem 0;\n  color: #2c3e50;\n}\n\n.bookings-list {\n  display: grid;\n  gap: 1rem;\n}\n\n.booking-card {\n  padding: 1.5rem;\n  border: 1px solid #eee;\n  border-radius: 8px;\n  background: white;\n}\n\n.booking-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 1rem;\n}\n\n.booking-header h4 {\n  margin: 0;\n  font-size: 1.25rem;\n  color: #2c3e50;\n}\n\n.status-badge {\n  padding: 0.25rem 0.75rem;\n  border-radius: 9999px;\n  font-size: 0.875rem;\n  font-weight: 500;\n}\n\n.status-badge.pending {\n  background: #fef3c7;\n  color: #d97706;\n}\n\n.status-badge.confirmed {\n  background: #e3fcef;\n  color: #42b983;\n}\n\n.status-badge.cancelled {\n  background: #fee2e2;\n  color: #ef4444;\n}\n\n.status-badge.completed {\n  background: #e0f2fe;\n  color: #0ea5e9;\n}\n\n.booking-details {\n  color: #4b5563;\n}\n\n.booking-details p {\n  margin: 0.5rem 0;\n}\n\n.booking-details strong {\n  color: #1f2937;\n  font-weight: 500;\n}\n\n.booking-actions {\n  display: flex;\n  gap: 1rem;\n  margin-top: 1rem;\n  padding-top: 1rem;\n  border-top: 1px solid #eee;\n}\n\n.btn-confirm,\n.btn-cancel {\n  padding: 0.5rem 1rem;\n  border-radius: 6px;\n  font-weight: 500;\n  cursor: pointer;\n  transition: all 0.2s;\n}\n\n.btn-confirm {\n  background: #42b983;\n  color: white;\n  border: none;\n}\n\n.btn-confirm:hover {\n  background: #3aa876;\n}\n\n.btn-cancel {\n  background: white;\n  color: #ef4444;\n  border: 1px solid #ef4444;\n}\n\n.btn-cancel:hover {\n  background: #fee2e2;\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}