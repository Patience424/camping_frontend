{"ast":null,"code":"import { mapState } from 'vuex';\nexport default {\n  name: 'LoginPage',\n  data() {\n    return {\n      credentials: {\n        email: '',\n        password: ''\n      },\n      rememberMe: false,\n      errors: {\n        email: '',\n        password: ''\n      }\n    };\n  },\n  computed: {\n    ...mapState({\n      isLoading: state => state.isLoading\n    })\n  },\n  methods: {\n    validateForm() {\n      let isValid = true;\n      this.errors = {\n        email: '',\n        password: ''\n      };\n      if (!this.credentials.email) {\n        this.errors.email = 'Email is required';\n        isValid = false;\n      } else if (!/\\S+@\\S+\\.\\S+/.test(this.credentials.email)) {\n        this.errors.email = 'Please enter a valid email address';\n        isValid = false;\n      }\n      if (!this.credentials.password) {\n        this.errors.password = 'Password is required';\n        isValid = false;\n      }\n      return isValid;\n    },\n    async login() {\n      if (!this.validateForm()) return;\n      try {\n        const user = await this.$store.dispatch('login', this.credentials);\n\n        // Redirect based on user role\n        if (user.role === 'ADMIN') {\n          this.$router.push('/admin/dashboard');\n        } else if (user.role === 'OWNER') {\n          this.$router.push('/owner/dashboard');\n        } else {\n          // Get the redirect URL from query parameters or go to the home page\n          const redirectUrl = this.$route.query.redirect || '/';\n          this.$router.push(redirectUrl);\n        }\n      } catch (error) {\n        if (error.response && error.response.data) {\n          const {\n            message\n          } = error.response.data;\n          if (message.includes('email')) {\n            this.errors.email = message;\n          } else if (message.includes('password')) {\n            this.errors.password = message;\n          } else {\n            this.$store.commit('setNotification', {\n              type: 'error',\n              message: message || 'Failed to sign in'\n            });\n          }\n        } else {\n          this.$store.commit('setNotification', {\n            type: 'error',\n            message: 'An error occurred during sign in'\n          });\n        }\n      }\n    }\n  }\n};","map":{"version":3,"names":["mapState","name","data","credentials","email","password","rememberMe","errors","computed","isLoading","state","methods","validateForm","isValid","test","login","user","$store","dispatch","role","$router","push","redirectUrl","$route","query","redirect","error","response","message","includes","commit","type"],"sources":["src/views/auth/Login.vue"],"sourcesContent":["<template>\r\n  <div class=\"min-h-screen bg-neutral-50 py-12 px-4 sm:px-6 lg:px-8 flex items-center\">\r\n    <div class=\"max-w-md w-full mx-auto space-y-8\">\r\n      <div class=\"text-center\">\r\n        <h1 class=\"text-3xl font-bold text-neutral-900 mb-2\">Sign in to your account</h1>\r\n        <p class=\"text-neutral-600\">\r\n          Welcome back! Please enter your details.\r\n        </p>\r\n      </div>\r\n      \r\n      <div class=\"bg-white py-8 px-4 shadow-md sm:rounded-lg sm:px-10\">\r\n        <form class=\"space-y-6\" @submit.prevent=\"login\">\r\n          <div>\r\n            <label for=\"email\" class=\"form-label\">Email address</label>\r\n            <input \r\n              id=\"email\" \r\n              v-model=\"credentials.email\" \r\n              type=\"email\" \r\n              required \r\n              class=\"form-input\" \r\n              :class=\"{ 'border-red-300': errors.email }\"\r\n            >\r\n            <p v-if=\"errors.email\" class=\"form-error\">{{ errors.email }}</p>\r\n          </div>\r\n          \r\n          <div>\r\n            <label for=\"password\" class=\"form-label\">Password</label>\r\n            <input \r\n              id=\"password\" \r\n              v-model=\"credentials.password\" \r\n              type=\"password\" \r\n              required \r\n              class=\"form-input\"\r\n              :class=\"{ 'border-red-300': errors.password }\"\r\n              autocomplete=\"current-password\"\r\n            >\r\n            <p v-if=\"errors.password\" class=\"form-error\">{{ errors.password }}</p>\r\n          </div>\r\n          \r\n          <div class=\"flex items-center justify-between\">\r\n            <div class=\"flex items-center\">\r\n              <input\r\n                id=\"remember-me\"\r\n                v-model=\"rememberMe\"\r\n                type=\"checkbox\"\r\n                class=\"h-4 w-4 text-primary-600 focus:ring-primary-500 border-neutral-300 rounded\"\r\n              >\r\n              <label for=\"remember-me\" class=\"ml-2 block text-sm text-neutral-600\">\r\n                Remember me\r\n              </label>\r\n            </div>\r\n            \r\n            <div class=\"text-sm\">\r\n              <router-link to=\"/forgot-password\" class=\"text-primary-600 hover:text-primary-500\">\r\n                Forgot your password?\r\n              </router-link>\r\n            </div>\r\n          </div>\r\n          \r\n          <div>\r\n            <button \r\n              type=\"submit\" \r\n              class=\"w-full btn-primary py-3 text-base\"\r\n              :disabled=\"isLoading\"\r\n            >\r\n              <span v-if=\"isLoading\">\r\n                <svg class=\"animate-spin -ml-1 mr-2 h-4 w-4 text-white inline-block\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\r\n                  <circle class=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" stroke-width=\"4\"></circle>\r\n                  <path class=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\r\n                </svg>\r\n                Signing in...\r\n              </span>\r\n              <span v-else>Sign in</span>\r\n            </button>\r\n          </div>\r\n        </form>\r\n        \r\n        <div class=\"mt-6\">\r\n          <div class=\"relative\">\r\n            <div class=\"absolute inset-0 flex items-center\">\r\n              <div class=\"w-full border-t border-neutral-300\"></div>\r\n            </div>\r\n            <div class=\"relative flex justify-center text-sm\">\r\n              <span class=\"px-2 bg-white text-neutral-500\">\r\n                Or continue with\r\n              </span>\r\n            </div>\r\n          </div>\r\n          \r\n          <div class=\"mt-6 grid grid-cols-1 gap-3\">\r\n            <div>\r\n              <a href=\"#\" class=\"w-full inline-flex justify-center py-2 px-4 border border-neutral-300 rounded-md shadow-sm bg-white text-sm font-medium text-neutral-700 hover:bg-neutral-50\">\r\n                <svg class=\"w-5 h-5 mr-2\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\r\n                  <path d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\" fill=\"#4285F4\"/>\r\n                  <path d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\" fill=\"#34A853\"/>\r\n                  <path d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\" fill=\"#FBBC05\"/>\r\n                  <path d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\" fill=\"#EA4335\"/>\r\n                </svg>\r\n                Sign in with Google\r\n              </a>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        \r\n        <div class=\"mt-6 text-center\">\r\n          <p class=\"text-sm text-neutral-600\">\r\n            Don't have an account?\r\n            <router-link to=\"/register\" class=\"font-medium text-primary-600 hover:text-primary-500\">\r\n              Sign up\r\n            </router-link>\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { mapState } from 'vuex'\r\n\r\nexport default {\r\n  name: 'LoginPage',\r\n  data() {\r\n    return {\r\n      credentials: {\r\n        email: '',\r\n        password: ''\r\n      },\r\n      rememberMe: false,\r\n      errors: {\r\n        email: '',\r\n        password: ''\r\n      }\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapState({\r\n      isLoading: state => state.isLoading\r\n    })\r\n  },\r\n  methods: {\r\n    validateForm() {\r\n      let isValid = true\r\n      this.errors = {\r\n        email: '',\r\n        password: ''\r\n      }\r\n      \r\n      if (!this.credentials.email) {\r\n        this.errors.email = 'Email is required'\r\n        isValid = false\r\n      } else if (!/\\S+@\\S+\\.\\S+/.test(this.credentials.email)) {\r\n        this.errors.email = 'Please enter a valid email address'\r\n        isValid = false\r\n      }\r\n      \r\n      if (!this.credentials.password) {\r\n        this.errors.password = 'Password is required'\r\n        isValid = false\r\n      }\r\n      \r\n      return isValid\r\n    },\r\n    \r\n    async login() {\r\n      if (!this.validateForm()) return\r\n      \r\n      try {\r\n        const user = await this.$store.dispatch('login', this.credentials)\r\n        \r\n        // Redirect based on user role\r\n        if (user.role === 'ADMIN') {\r\n          this.$router.push('/admin/dashboard')\r\n        } else if (user.role === 'OWNER') {\r\n          this.$router.push('/owner/dashboard')\r\n        } else {\r\n          // Get the redirect URL from query parameters or go to the home page\r\n          const redirectUrl = this.$route.query.redirect || '/'\r\n          this.$router.push(redirectUrl)\r\n        }\r\n      } catch (error) {\r\n        if (error.response && error.response.data) {\r\n          const { message } = error.response.data\r\n          \r\n          if (message.includes('email')) {\r\n            this.errors.email = message\r\n          } else if (message.includes('password')) {\r\n            this.errors.password = message\r\n          } else {\r\n            this.$store.commit('setNotification', {\r\n              type: 'error',\r\n              message: message || 'Failed to sign in'\r\n            })\r\n          }\r\n        } else {\r\n          this.$store.commit('setNotification', {\r\n            type: 'error',\r\n            message: 'An error occurred during sign in'\r\n          })\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>"],"mappings":"AAsHA,SAAAA,QAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,WAAA;QACAC,KAAA;QACAC,QAAA;MACA;MACAC,UAAA;MACAC,MAAA;QACAH,KAAA;QACAC,QAAA;MACA;IACA;EACA;EACAG,QAAA;IACA,GAAAR,QAAA;MACAS,SAAA,EAAAC,KAAA,IAAAA,KAAA,CAAAD;IACA;EACA;EACAE,OAAA;IACAC,aAAA;MACA,IAAAC,OAAA;MACA,KAAAN,MAAA;QACAH,KAAA;QACAC,QAAA;MACA;MAEA,UAAAF,WAAA,CAAAC,KAAA;QACA,KAAAG,MAAA,CAAAH,KAAA;QACAS,OAAA;MACA,2BAAAC,IAAA,MAAAX,WAAA,CAAAC,KAAA;QACA,KAAAG,MAAA,CAAAH,KAAA;QACAS,OAAA;MACA;MAEA,UAAAV,WAAA,CAAAE,QAAA;QACA,KAAAE,MAAA,CAAAF,QAAA;QACAQ,OAAA;MACA;MAEA,OAAAA,OAAA;IACA;IAEA,MAAAE,MAAA;MACA,UAAAH,YAAA;MAEA;QACA,MAAAI,IAAA,cAAAC,MAAA,CAAAC,QAAA,eAAAf,WAAA;;QAEA;QACA,IAAAa,IAAA,CAAAG,IAAA;UACA,KAAAC,OAAA,CAAAC,IAAA;QACA,WAAAL,IAAA,CAAAG,IAAA;UACA,KAAAC,OAAA,CAAAC,IAAA;QACA;UACA;UACA,MAAAC,WAAA,QAAAC,MAAA,CAAAC,KAAA,CAAAC,QAAA;UACA,KAAAL,OAAA,CAAAC,IAAA,CAAAC,WAAA;QACA;MACA,SAAAI,KAAA;QACA,IAAAA,KAAA,CAAAC,QAAA,IAAAD,KAAA,CAAAC,QAAA,CAAAzB,IAAA;UACA;YAAA0B;UAAA,IAAAF,KAAA,CAAAC,QAAA,CAAAzB,IAAA;UAEA,IAAA0B,OAAA,CAAAC,QAAA;YACA,KAAAtB,MAAA,CAAAH,KAAA,GAAAwB,OAAA;UACA,WAAAA,OAAA,CAAAC,QAAA;YACA,KAAAtB,MAAA,CAAAF,QAAA,GAAAuB,OAAA;UACA;YACA,KAAAX,MAAA,CAAAa,MAAA;cACAC,IAAA;cACAH,OAAA,EAAAA,OAAA;YACA;UACA;QACA;UACA,KAAAX,MAAA,CAAAa,MAAA;YACAC,IAAA;YACAH,OAAA;UACA;QACA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}