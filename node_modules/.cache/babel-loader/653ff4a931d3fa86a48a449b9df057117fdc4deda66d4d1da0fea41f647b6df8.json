{"ast":null,"code":"import { ownerAPI } from '@/services/api';\nexport default {\n  name: 'OwnerCampingSpots',\n  data() {\n    return {\n      campingSpots: [],\n      currentImageIndex: {},\n      isLoading: false\n    };\n  },\n  async created() {\n    await this.fetchCampingSpots();\n  },\n  methods: {\n    getImageUrl(image) {\n      if (!image) return 'https://images.pexels.com/photos/6271625/pexels-photo-6271625.jpeg?auto=compress&cs=tinysrgb&w=1600';\n\n      // If image is an object with url property\n      if (typeof image === 'object' && image.url) {\n        return this.getImageUrl(image.url);\n      }\n\n      // If image is a string\n      if (typeof image === 'string') {\n        // If it's a full URL, return it\n        if (image.startsWith('http')) {\n          return image;\n        }\n        // If it's a relative path, prepend the API base URL\n        return `http://localhost:3000${image.startsWith('/') ? image : '/' + image}`;\n      }\n      return 'https://images.pexels.com/photos/6271625/pexels-photo-6271625.jpeg?auto=compress&cs=tinysrgb&w=1600';\n    },\n    async fetchCampingSpots() {\n      try {\n        this.isLoading = true;\n        const response = await ownerAPI.getCampingSpots();\n        console.log('API Response:', response);\n        console.log('Response data:', response.data);\n        console.log('First camping spot:', response.data?.[0]);\n        console.log('First camping spot images:', response.data?.[0]?.images);\n        this.campingSpots = Array.isArray(response.data) ? response.data : [];\n        console.log('Camping spots after assignment:', this.campingSpots);\n\n        // Initialize current image index for each spot\n        this.campingSpots.forEach(spot => {\n          console.log(`Camping spot ${spot.id} images:`, spot.images);\n          this.$set(this.currentImageIndex, spot.id, 0);\n        });\n      } catch (error) {\n        console.error('Error fetching camping spots:', error);\n        this.$store.commit('setNotification', {\n          type: 'error',\n          message: 'Failed to load camping spots'\n        });\n      } finally {\n        this.isLoading = false;\n      }\n    },\n    prevImage(spotId) {\n      if (this.currentImageIndex[spotId] > 0) {\n        this.$set(this.currentImageIndex, spotId, this.currentImageIndex[spotId] - 1);\n      }\n    },\n    nextImage(spotId) {\n      const spot = this.campingSpots.find(s => s.id === spotId);\n      if (this.currentImageIndex[spotId] < (spot.images || []).length - 1) {\n        this.$set(this.currentImageIndex, spotId, this.currentImageIndex[spotId] + 1);\n      }\n    },\n    setImageIndex(spotId, index) {\n      this.$set(this.currentImageIndex, spotId, index);\n    },\n    async deleteSpot(id) {\n      if (confirm('Are you sure you want to delete this camping spot?')) {\n        try {\n          await ownerAPI.deleteCampingSpot(id);\n          this.campingSpots = this.campingSpots.filter(spot => spot.id !== id);\n          this.$store.commit('setNotification', {\n            type: 'success',\n            message: 'Camping spot deleted successfully'\n          });\n        } catch (error) {\n          console.error('Error deleting camping spot:', error);\n          this.$store.commit('setNotification', {\n            type: 'error',\n            message: 'Failed to delete camping spot'\n          });\n        }\n      }\n    }\n  }\n};","map":{"version":3,"names":["ownerAPI","name","data","campingSpots","currentImageIndex","isLoading","created","fetchCampingSpots","methods","getImageUrl","image","url","startsWith","response","getCampingSpots","console","log","images","Array","isArray","forEach","spot","id","$set","error","$store","commit","type","message","prevImage","spotId","nextImage","find","s","length","setImageIndex","index","deleteSpot","confirm","deleteCampingSpot","filter"],"sources":["src/views/owner/OwnerCampingSpots.vue"],"sourcesContent":["<template>\r\n  <div class=\"owner-camping-spots\">\r\n    <div class=\"header\">\r\n      <h1>My Camping Spots</h1>\r\n      <router-link to=\"/owner/camping-spots/new\" class=\"btn-primary\">\r\n        Add New Camping Spot\r\n      </router-link>\r\n    </div>\r\n\r\n    <div class=\"spots-list\">\r\n      <div v-if=\"isLoading\" class=\"loading\">\r\n        Loading camping spots...\r\n      </div>\r\n      <div v-else-if=\"campingSpots.length\" class=\"spots-grid\">\r\n        <div v-for=\"spot in campingSpots\" :key=\"spot.id\" class=\"spot-card\">\r\n          <div class=\"image-carousel\">\r\n            <img \r\n              v-for=\"(image, index) in (spot.images || [])\" \r\n              :key=\"index\"\r\n              :src=\"getImageUrl(image)\" \r\n              :alt=\"spot.name\"\r\n              class=\"spot-image\"\r\n              :class=\"{ active: currentImageIndex[spot.id] === index }\"\r\n              @error=\"e => e.target.src = 'https://images.pexels.com/photos/6271625/pexels-photo-6271625.jpeg?auto=compress&cs=tinysrgb&w=1600'\"\r\n            >\r\n            <div v-if=\"(spot.images || []).length > 1\" class=\"carousel-controls\">\r\n              <button \r\n                @click=\"prevImage(spot.id)\" \r\n                class=\"carousel-btn prev\"\r\n                :disabled=\"currentImageIndex[spot.id] === 0\"\r\n              >\r\n                ‹\r\n              </button>\r\n              <button \r\n                @click=\"nextImage(spot.id)\" \r\n                class=\"carousel-btn next\"\r\n                :disabled=\"currentImageIndex[spot.id] === (spot.images || []).length - 1\"\r\n              >\r\n                ›\r\n              </button>\r\n            </div>\r\n            <div v-if=\"(spot.images || []).length > 1\" class=\"carousel-dots\">\r\n              <button\r\n                v-for=\"(_, index) in (spot.images || [])\"\r\n                :key=\"index\"\r\n                @click=\"setImageIndex(spot.id, index)\"\r\n                class=\"dot\"\r\n                :class=\"{ active: currentImageIndex[spot.id] === index }\"\r\n              ></button>\r\n            </div>\r\n          </div>\r\n          <div class=\"spot-info\">\r\n            <h3>{{ spot.name }}</h3>\r\n            <p class=\"location\">{{ spot.location }}</p>\r\n            <p class=\"price\">€{{ spot.pricePerNight }} per night</p>\r\n            <div class=\"status\" :class=\"(spot.status || 'active').toLowerCase()\">\r\n              {{ spot.status || 'Active' }}\r\n            </div>\r\n            <div class=\"actions\">\r\n              <router-link :to=\"`/owner/camping-spots/${spot.id}/edit`\" class=\"btn-edit\">\r\n                Edit\r\n              </router-link>\r\n              <button @click=\"deleteSpot(spot.id)\" class=\"btn-delete\">\r\n                Delete\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <p v-else class=\"no-spots\">You haven't added any camping spots yet.</p>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ownerAPI } from '@/services/api'\r\n\r\nexport default {\r\n  name: 'OwnerCampingSpots',\r\n  data() {\r\n    return {\r\n      campingSpots: [],\r\n      currentImageIndex: {},\r\n      isLoading: false\r\n    }\r\n  },\r\n  async created() {\r\n    await this.fetchCampingSpots()\r\n  },\r\n  methods: {\r\n    getImageUrl(image) {\r\n      if (!image) return 'https://images.pexels.com/photos/6271625/pexels-photo-6271625.jpeg?auto=compress&cs=tinysrgb&w=1600'\r\n      \r\n      // If image is an object with url property\r\n      if (typeof image === 'object' && image.url) {\r\n        return this.getImageUrl(image.url)\r\n      }\r\n      \r\n      // If image is a string\r\n      if (typeof image === 'string') {\r\n        // If it's a full URL, return it\r\n        if (image.startsWith('http')) {\r\n          return image\r\n        }\r\n        // If it's a relative path, prepend the API base URL\r\n        return `http://localhost:3000${image.startsWith('/') ? image : '/' + image}`\r\n      }\r\n      \r\n      return 'https://images.pexels.com/photos/6271625/pexels-photo-6271625.jpeg?auto=compress&cs=tinysrgb&w=1600'\r\n    },\r\n    async fetchCampingSpots() {\r\n      try {\r\n        this.isLoading = true\r\n        const response = await ownerAPI.getCampingSpots()\r\n        console.log('API Response:', response)\r\n        console.log('Response data:', response.data)\r\n        console.log('First camping spot:', response.data?.[0])\r\n        console.log('First camping spot images:', response.data?.[0]?.images)\r\n        \r\n        this.campingSpots = Array.isArray(response.data) ? response.data : []\r\n        console.log('Camping spots after assignment:', this.campingSpots)\r\n        \r\n        // Initialize current image index for each spot\r\n        this.campingSpots.forEach(spot => {\r\n          console.log(`Camping spot ${spot.id} images:`, spot.images)\r\n          this.$set(this.currentImageIndex, spot.id, 0)\r\n        })\r\n      } catch (error) {\r\n        console.error('Error fetching camping spots:', error)\r\n        this.$store.commit('setNotification', {\r\n          type: 'error',\r\n          message: 'Failed to load camping spots'\r\n        })\r\n      } finally {\r\n        this.isLoading = false\r\n      }\r\n    },\r\n    prevImage(spotId) {\r\n      if (this.currentImageIndex[spotId] > 0) {\r\n        this.$set(this.currentImageIndex, spotId, this.currentImageIndex[spotId] - 1)\r\n      }\r\n    },\r\n    nextImage(spotId) {\r\n      const spot = this.campingSpots.find(s => s.id === spotId)\r\n      if (this.currentImageIndex[spotId] < (spot.images || []).length - 1) {\r\n        this.$set(this.currentImageIndex, spotId, this.currentImageIndex[spotId] + 1)\r\n      }\r\n    },\r\n    setImageIndex(spotId, index) {\r\n      this.$set(this.currentImageIndex, spotId, index)\r\n    },\r\n    async deleteSpot(id) {\r\n      if (confirm('Are you sure you want to delete this camping spot?')) {\r\n        try {\r\n          await ownerAPI.deleteCampingSpot(id)\r\n          this.campingSpots = this.campingSpots.filter(spot => spot.id !== id)\r\n          this.$store.commit('setNotification', {\r\n            type: 'success',\r\n            message: 'Camping spot deleted successfully'\r\n          })\r\n        } catch (error) {\r\n          console.error('Error deleting camping spot:', error)\r\n          this.$store.commit('setNotification', {\r\n            type: 'error',\r\n            message: 'Failed to delete camping spot'\r\n          })\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.owner-camping-spots {\r\n  padding: 2rem;\r\n}\r\n\r\n.header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 2rem;\r\n}\r\n\r\n.btn-primary {\r\n  background: #42b983;\r\n  color: white;\r\n  padding: 0.75rem 1.5rem;\r\n  border-radius: 4px;\r\n  text-decoration: none;\r\n  font-weight: 500;\r\n}\r\n\r\n.spots-grid {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\r\n  gap: 2rem;\r\n}\r\n\r\n.spot-card {\r\n  background: white;\r\n  border-radius: 8px;\r\n  overflow: hidden;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.image-carousel {\r\n  position: relative;\r\n  width: 100%;\r\n  height: 200px;\r\n  overflow: hidden;\r\n}\r\n\r\n.spot-image {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  object-fit: cover;\r\n  opacity: 0;\r\n  transition: opacity 0.3s ease;\r\n}\r\n\r\n.spot-image.active {\r\n  opacity: 1;\r\n}\r\n\r\n.spot-info {\r\n  padding: 1.5rem;\r\n}\r\n\r\n.spot-info h3 {\r\n  margin: 0 0 0.5rem 0;\r\n  color: #2c3e50;\r\n}\r\n\r\n.location {\r\n  color: #666;\r\n  margin-bottom: 0.5rem;\r\n}\r\n\r\n.price {\r\n  font-weight: bold;\r\n  color: #42b983;\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n.status {\r\n  display: inline-block;\r\n  padding: 0.25rem 0.75rem;\r\n  border-radius: 20px;\r\n  font-size: 0.875rem;\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n.status.active {\r\n  background: #e3fcef;\r\n  color: #42b983;\r\n}\r\n\r\n.status.inactive {\r\n  background: #fee2e2;\r\n  color: #ef4444;\r\n}\r\n\r\n.actions {\r\n  display: flex;\r\n  gap: 1rem;\r\n}\r\n\r\n.btn-edit, .btn-delete {\r\n  padding: 0.5rem 1rem;\r\n  border-radius: 4px;\r\n  text-decoration: none;\r\n  font-weight: 500;\r\n}\r\n\r\n.btn-edit {\r\n  background: #e3fcef;\r\n  color: #42b983;\r\n}\r\n\r\n.btn-delete {\r\n  background: #fee2e2;\r\n  color: #ef4444;\r\n  border: none;\r\n  cursor: pointer;\r\n}\r\n\r\n.no-spots {\r\n  text-align: center;\r\n  color: #666;\r\n  margin-top: 2rem;\r\n}\r\n\r\n.carousel-controls {\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 0;\r\n  right: 0;\r\n  transform: translateY(-50%);\r\n  display: flex;\r\n  justify-content: space-between;\r\n  padding: 0 1rem;\r\n  pointer-events: none;\r\n}\r\n\r\n.carousel-btn {\r\n  width: 32px;\r\n  height: 32px;\r\n  border-radius: 50%;\r\n  background: rgba(255, 255, 255, 0.8);\r\n  border: none;\r\n  cursor: pointer;\r\n  font-size: 1.5rem;\r\n  line-height: 1;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  pointer-events: auto;\r\n  transition: background-color 0.2s;\r\n}\r\n\r\n.carousel-btn:hover {\r\n  background: white;\r\n}\r\n\r\n.carousel-btn:disabled {\r\n  opacity: 0.5;\r\n  cursor: not-allowed;\r\n}\r\n\r\n.carousel-dots {\r\n  position: absolute;\r\n  bottom: 1rem;\r\n  left: 50%;\r\n  transform: translateX(-50%);\r\n  display: flex;\r\n  gap: 0.5rem;\r\n}\r\n\r\n.dot {\r\n  width: 8px;\r\n  height: 8px;\r\n  border-radius: 50%;\r\n  background: rgba(255, 255, 255, 0.5);\r\n  border: none;\r\n  cursor: pointer;\r\n  padding: 0;\r\n  transition: background-color 0.2s;\r\n}\r\n\r\n.dot.active {\r\n  background: white;\r\n}\r\n\r\n.loading {\r\n  text-align: center;\r\n  padding: 2rem;\r\n  color: #666;\r\n  font-size: 1.1rem;\r\n}\r\n</style> "],"mappings":"AA2EA,SAAAA,QAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,YAAA;MACAC,iBAAA;MACAC,SAAA;IACA;EACA;EACA,MAAAC,QAAA;IACA,WAAAC,iBAAA;EACA;EACAC,OAAA;IACAC,YAAAC,KAAA;MACA,KAAAA,KAAA;;MAEA;MACA,WAAAA,KAAA,iBAAAA,KAAA,CAAAC,GAAA;QACA,YAAAF,WAAA,CAAAC,KAAA,CAAAC,GAAA;MACA;;MAEA;MACA,WAAAD,KAAA;QACA;QACA,IAAAA,KAAA,CAAAE,UAAA;UACA,OAAAF,KAAA;QACA;QACA;QACA,+BAAAA,KAAA,CAAAE,UAAA,QAAAF,KAAA,SAAAA,KAAA;MACA;MAEA;IACA;IACA,MAAAH,kBAAA;MACA;QACA,KAAAF,SAAA;QACA,MAAAQ,QAAA,SAAAb,QAAA,CAAAc,eAAA;QACAC,OAAA,CAAAC,GAAA,kBAAAH,QAAA;QACAE,OAAA,CAAAC,GAAA,mBAAAH,QAAA,CAAAX,IAAA;QACAa,OAAA,CAAAC,GAAA,wBAAAH,QAAA,CAAAX,IAAA;QACAa,OAAA,CAAAC,GAAA,+BAAAH,QAAA,CAAAX,IAAA,OAAAe,MAAA;QAEA,KAAAd,YAAA,GAAAe,KAAA,CAAAC,OAAA,CAAAN,QAAA,CAAAX,IAAA,IAAAW,QAAA,CAAAX,IAAA;QACAa,OAAA,CAAAC,GAAA,yCAAAb,YAAA;;QAEA;QACA,KAAAA,YAAA,CAAAiB,OAAA,CAAAC,IAAA;UACAN,OAAA,CAAAC,GAAA,iBAAAK,IAAA,CAAAC,EAAA,YAAAD,IAAA,CAAAJ,MAAA;UACA,KAAAM,IAAA,MAAAnB,iBAAA,EAAAiB,IAAA,CAAAC,EAAA;QACA;MACA,SAAAE,KAAA;QACAT,OAAA,CAAAS,KAAA,kCAAAA,KAAA;QACA,KAAAC,MAAA,CAAAC,MAAA;UACAC,IAAA;UACAC,OAAA;QACA;MACA;QACA,KAAAvB,SAAA;MACA;IACA;IACAwB,UAAAC,MAAA;MACA,SAAA1B,iBAAA,CAAA0B,MAAA;QACA,KAAAP,IAAA,MAAAnB,iBAAA,EAAA0B,MAAA,OAAA1B,iBAAA,CAAA0B,MAAA;MACA;IACA;IACAC,UAAAD,MAAA;MACA,MAAAT,IAAA,QAAAlB,YAAA,CAAA6B,IAAA,CAAAC,CAAA,IAAAA,CAAA,CAAAX,EAAA,KAAAQ,MAAA;MACA,SAAA1B,iBAAA,CAAA0B,MAAA,KAAAT,IAAA,CAAAJ,MAAA,QAAAiB,MAAA;QACA,KAAAX,IAAA,MAAAnB,iBAAA,EAAA0B,MAAA,OAAA1B,iBAAA,CAAA0B,MAAA;MACA;IACA;IACAK,cAAAL,MAAA,EAAAM,KAAA;MACA,KAAAb,IAAA,MAAAnB,iBAAA,EAAA0B,MAAA,EAAAM,KAAA;IACA;IACA,MAAAC,WAAAf,EAAA;MACA,IAAAgB,OAAA;QACA;UACA,MAAAtC,QAAA,CAAAuC,iBAAA,CAAAjB,EAAA;UACA,KAAAnB,YAAA,QAAAA,YAAA,CAAAqC,MAAA,CAAAnB,IAAA,IAAAA,IAAA,CAAAC,EAAA,KAAAA,EAAA;UACA,KAAAG,MAAA,CAAAC,MAAA;YACAC,IAAA;YACAC,OAAA;UACA;QACA,SAAAJ,KAAA;UACAT,OAAA,CAAAS,KAAA,iCAAAA,KAAA;UACA,KAAAC,MAAA,CAAAC,MAAA;YACAC,IAAA;YACAC,OAAA;UACA;QACA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}