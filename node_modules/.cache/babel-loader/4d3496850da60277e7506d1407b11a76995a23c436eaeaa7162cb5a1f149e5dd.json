{"ast":null,"code":"import { ownerAPI } from '@/services/api';\nimport { mapState } from 'vuex';\nexport default {\n  name: 'OwnerDashboard',\n  data() {\n    return {\n      totalSpots: 0,\n      activeBookings: 0,\n      totalRevenue: 0,\n      recentBookings: [],\n      isLoading: false\n    };\n  },\n  computed: {\n    ...mapState({\n      user: state => state.user\n    })\n  },\n  async created() {\n    await this.fetchDashboardData();\n  },\n  methods: {\n    async fetchDashboardData() {\n      try {\n        this.isLoading = true;\n        console.log('Fetching dashboard data...');\n        const [statsResponse, bookingsResponse] = await Promise.all([ownerAPI.getDashboardStats().catch(error => {\n          console.error('Error fetching dashboard stats:', error);\n          return {\n            data: {\n              totalSpots: 0,\n              activeBookings: 0,\n              totalRevenue: 0\n            }\n          };\n        }), ownerAPI.getBookings().catch(error => {\n          console.error('Error fetching bookings:', error);\n          return {\n            data: []\n          };\n        })]);\n        console.log('Stats response:', statsResponse);\n        console.log('Bookings response:', bookingsResponse);\n\n        // Update dashboard stats\n        const stats = statsResponse.data;\n        this.totalSpots = stats.totalSpots || 0;\n        this.activeBookings = stats.activeBookings || 0;\n        this.totalRevenue = stats.totalRevenue || 0;\n\n        // Update recent bookings\n        const bookings = bookingsResponse.data || [];\n        console.log('Raw bookings data:', bookings);\n        this.recentBookings = bookings.slice(0, 5).map(booking => {\n          console.log('Processing booking:', booking);\n          return {\n            id: booking.id,\n            campingSpotName: booking.campingSpot?.name || booking.spotName || 'Unknown Spot',\n            guestName: booking.user?.name || booking.userName || 'Unknown Guest',\n            checkIn: new Date(booking.startDate || booking.checkIn).toLocaleDateString(),\n            checkOut: new Date(booking.endDate || booking.checkOut).toLocaleDateString(),\n            status: booking.status || 'Unknown',\n            total: booking.total || 0\n          };\n        });\n        console.log('Processed dashboard stats:', {\n          totalSpots: this.totalSpots,\n          activeBookings: this.activeBookings,\n          totalRevenue: this.totalRevenue\n        });\n        console.log('Processed recent bookings:', this.recentBookings);\n      } catch (error) {\n        console.error('Error in fetchDashboardData:', error);\n        this.$store.commit('setNotification', {\n          type: 'error',\n          message: 'Failed to load dashboard data'\n        });\n      } finally {\n        this.isLoading = false;\n      }\n    }\n  }\n};","map":{"version":3,"names":["ownerAPI","mapState","name","data","totalSpots","activeBookings","totalRevenue","recentBookings","isLoading","computed","user","state","created","fetchDashboardData","methods","console","log","statsResponse","bookingsResponse","Promise","all","getDashboardStats","catch","error","getBookings","stats","bookings","slice","map","booking","id","campingSpotName","campingSpot","spotName","guestName","userName","checkIn","Date","startDate","toLocaleDateString","checkOut","endDate","status","total","$store","commit","type","message"],"sources":["src/views/owner/OwnerDashboard.vue"],"sourcesContent":["<template>\n  <div class=\"owner-dashboard\">\n    <div class=\"dashboard-header\">\n      <div class=\"owner-profile\">\n        <div class=\"profile-avatar\">\n          <div v-if=\"user?.avatar\" class=\"avatar-image\">\n            <img :src=\"user.avatar\" alt=\"Profile picture\">\n          </div>\n          <div v-else class=\"avatar-placeholder\">\n            {{ user?.name?.[0]?.toUpperCase() || 'O' }}\n          </div>\n        </div>\n        <div class=\"profile-info\">\n          <h1>Welcome, {{ user?.name || 'Owner' }}</h1>\n          <p>{{ user?.email }}</p>\n        </div>\n      </div>\n    </div>\n    \n    <div v-if=\"isLoading\" class=\"loading\">\n      <div class=\"spinner\"></div>\n      <p>Loading dashboard data...</p>\n    </div>\n    \n    <template v-else>\n      <div class=\"dashboard-stats\">\n        <div class=\"stat-card\">\n          <h3>Total Camping Spots</h3>\n          <p class=\"stat-number\">{{ totalSpots }}</p>\n        </div>\n        <div class=\"stat-card\">\n          <h3>Active Bookings</h3>\n          <p class=\"stat-number\">{{ activeBookings }}</p>\n        </div>\n        <div class=\"stat-card\">\n          <h3>Total Revenue</h3>\n          <p class=\"stat-number\">â‚¬{{ totalRevenue.toFixed(2) }}</p>\n        </div>\n      </div>\n      \n      <div class=\"recent-bookings\">\n        <h2>Recent Bookings</h2>\n        <div v-if=\"recentBookings.length\" class=\"bookings-list\">\n          <div v-for=\"booking in recentBookings\" :key=\"booking.id\" class=\"booking-card\">\n            <h4>{{ booking.campingSpotName }}</h4>\n            <p>Guest: {{ booking.guestName }}</p>\n            <p>Dates: {{ booking.checkIn }} - {{ booking.checkOut }}</p>\n            <p>Status: {{ booking.status }}</p>\n          </div>\n        </div>\n        <p v-else>No recent bookings</p>\n      </div>\n    </template>\n  </div>\n</template>\n\n<script>\nimport { ownerAPI } from '@/services/api'\nimport { mapState } from 'vuex'\n\nexport default {\n  name: 'OwnerDashboard',\n  data() {\n    return {\n      totalSpots: 0,\n      activeBookings: 0,\n      totalRevenue: 0,\n      recentBookings: [],\n      isLoading: false\n    }\n  },\n  computed: {\n    ...mapState({\n      user: state => state.user\n    })\n  },\n  async created() {\n    await this.fetchDashboardData()\n  },\n  methods: {\n    async fetchDashboardData() {\n      try {\n        this.isLoading = true\n        console.log('Fetching dashboard data...')\n        \n        const [statsResponse, bookingsResponse] = await Promise.all([\n          ownerAPI.getDashboardStats().catch(error => {\n            console.error('Error fetching dashboard stats:', error)\n            return { data: { totalSpots: 0, activeBookings: 0, totalRevenue: 0 } }\n          }),\n          ownerAPI.getBookings().catch(error => {\n            console.error('Error fetching bookings:', error)\n            return { data: [] }\n          })\n        ])\n\n        console.log('Stats response:', statsResponse)\n        console.log('Bookings response:', bookingsResponse)\n\n        // Update dashboard stats\n        const stats = statsResponse.data\n        this.totalSpots = stats.totalSpots || 0\n        this.activeBookings = stats.activeBookings || 0\n        this.totalRevenue = stats.totalRevenue || 0\n\n        // Update recent bookings\n        const bookings = bookingsResponse.data || []\n        console.log('Raw bookings data:', bookings)\n        \n        this.recentBookings = bookings.slice(0, 5).map(booking => {\n          console.log('Processing booking:', booking)\n          return {\n            id: booking.id,\n            campingSpotName: booking.campingSpot?.name || booking.spotName || 'Unknown Spot',\n            guestName: booking.user?.name || booking.userName || 'Unknown Guest',\n            checkIn: new Date(booking.startDate || booking.checkIn).toLocaleDateString(),\n            checkOut: new Date(booking.endDate || booking.checkOut).toLocaleDateString(),\n            status: booking.status || 'Unknown',\n            total: booking.total || 0\n          }\n        })\n\n        console.log('Processed dashboard stats:', {\n          totalSpots: this.totalSpots,\n          activeBookings: this.activeBookings,\n          totalRevenue: this.totalRevenue\n        })\n        console.log('Processed recent bookings:', this.recentBookings)\n      } catch (error) {\n        console.error('Error in fetchDashboardData:', error)\n        this.$store.commit('setNotification', {\n          type: 'error',\n          message: 'Failed to load dashboard data'\n        })\n      } finally {\n        this.isLoading = false\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\n.owner-dashboard {\n  padding: 2rem;\n}\n\n.dashboard-header {\n  margin-bottom: 2rem;\n}\n\n.owner-profile {\n  display: flex;\n  align-items: center;\n  gap: 1.5rem;\n  padding: 1.5rem;\n  background: white;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n.profile-avatar {\n  width: 80px;\n  height: 80px;\n  border-radius: 50%;\n  overflow: hidden;\n}\n\n.avatar-image {\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n}\n\n.avatar-placeholder {\n  width: 100%;\n  height: 100%;\n  background: #42b983;\n  color: white;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  font-weight: bold;\n}\n\n.profile-info h1 {\n  margin: 0;\n  font-size: 1.5rem;\n  color: #2c3e50;\n}\n\n.profile-info p {\n  margin: 0.25rem 0 0 0;\n  color: #666;\n}\n\n.loading {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  min-height: 200px;\n}\n\n.spinner {\n  width: 40px;\n  height: 40px;\n  border: 4px solid #f3f3f3;\n  border-top: 4px solid #42b983;\n  border-radius: 50%;\n  animation: spin 1s linear infinite;\n  margin-bottom: 1rem;\n}\n\n@keyframes spin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}\n\n.dashboard-stats {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n  gap: 1.5rem;\n  margin-bottom: 2rem;\n}\n\n.stat-card {\n  background: white;\n  padding: 1.5rem;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n.stat-card h3 {\n  margin: 0 0 0.5rem 0;\n  color: #666;\n  font-size: 1rem;\n}\n\n.stat-number {\n  font-size: 2rem;\n  font-weight: bold;\n  color: #2c3e50;\n  margin: 0;\n}\n\n.recent-bookings {\n  background: white;\n  padding: 1.5rem;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n.recent-bookings h2 {\n  margin: 0 0 1rem 0;\n  color: #2c3e50;\n}\n\n.bookings-list {\n  display: grid;\n  gap: 1rem;\n}\n\n.booking-card {\n  padding: 1rem;\n  border: 1px solid #eee;\n  border-radius: 4px;\n}\n\n.booking-card h4 {\n  margin: 0 0 0.5rem 0;\n  color: #2c3e50;\n}\n\n.booking-card p {\n  margin: 0.25rem 0;\n  color: #666;\n}\n</style> "],"mappings":"AAyDA,SAAAA,QAAA;AACA,SAAAC,QAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,UAAA;MACAC,cAAA;MACAC,YAAA;MACAC,cAAA;MACAC,SAAA;IACA;EACA;EACAC,QAAA;IACA,GAAAR,QAAA;MACAS,IAAA,EAAAC,KAAA,IAAAA,KAAA,CAAAD;IACA;EACA;EACA,MAAAE,QAAA;IACA,WAAAC,kBAAA;EACA;EACAC,OAAA;IACA,MAAAD,mBAAA;MACA;QACA,KAAAL,SAAA;QACAO,OAAA,CAAAC,GAAA;QAEA,OAAAC,aAAA,EAAAC,gBAAA,UAAAC,OAAA,CAAAC,GAAA,EACApB,QAAA,CAAAqB,iBAAA,GAAAC,KAAA,CAAAC,KAAA;UACAR,OAAA,CAAAQ,KAAA,oCAAAA,KAAA;UACA;YAAApB,IAAA;cAAAC,UAAA;cAAAC,cAAA;cAAAC,YAAA;YAAA;UAAA;QACA,IACAN,QAAA,CAAAwB,WAAA,GAAAF,KAAA,CAAAC,KAAA;UACAR,OAAA,CAAAQ,KAAA,6BAAAA,KAAA;UACA;YAAApB,IAAA;UAAA;QACA,GACA;QAEAY,OAAA,CAAAC,GAAA,oBAAAC,aAAA;QACAF,OAAA,CAAAC,GAAA,uBAAAE,gBAAA;;QAEA;QACA,MAAAO,KAAA,GAAAR,aAAA,CAAAd,IAAA;QACA,KAAAC,UAAA,GAAAqB,KAAA,CAAArB,UAAA;QACA,KAAAC,cAAA,GAAAoB,KAAA,CAAApB,cAAA;QACA,KAAAC,YAAA,GAAAmB,KAAA,CAAAnB,YAAA;;QAEA;QACA,MAAAoB,QAAA,GAAAR,gBAAA,CAAAf,IAAA;QACAY,OAAA,CAAAC,GAAA,uBAAAU,QAAA;QAEA,KAAAnB,cAAA,GAAAmB,QAAA,CAAAC,KAAA,OAAAC,GAAA,CAAAC,OAAA;UACAd,OAAA,CAAAC,GAAA,wBAAAa,OAAA;UACA;YACAC,EAAA,EAAAD,OAAA,CAAAC,EAAA;YACAC,eAAA,EAAAF,OAAA,CAAAG,WAAA,EAAA9B,IAAA,IAAA2B,OAAA,CAAAI,QAAA;YACAC,SAAA,EAAAL,OAAA,CAAAnB,IAAA,EAAAR,IAAA,IAAA2B,OAAA,CAAAM,QAAA;YACAC,OAAA,MAAAC,IAAA,CAAAR,OAAA,CAAAS,SAAA,IAAAT,OAAA,CAAAO,OAAA,EAAAG,kBAAA;YACAC,QAAA,MAAAH,IAAA,CAAAR,OAAA,CAAAY,OAAA,IAAAZ,OAAA,CAAAW,QAAA,EAAAD,kBAAA;YACAG,MAAA,EAAAb,OAAA,CAAAa,MAAA;YACAC,KAAA,EAAAd,OAAA,CAAAc,KAAA;UACA;QACA;QAEA5B,OAAA,CAAAC,GAAA;UACAZ,UAAA,OAAAA,UAAA;UACAC,cAAA,OAAAA,cAAA;UACAC,YAAA,OAAAA;QACA;QACAS,OAAA,CAAAC,GAAA,oCAAAT,cAAA;MACA,SAAAgB,KAAA;QACAR,OAAA,CAAAQ,KAAA,iCAAAA,KAAA;QACA,KAAAqB,MAAA,CAAAC,MAAA;UACAC,IAAA;UACAC,OAAA;QACA;MACA;QACA,KAAAvC,SAAA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}